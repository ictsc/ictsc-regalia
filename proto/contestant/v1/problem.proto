syntax = "proto3";

package contestant.v1;

import "google/protobuf/timestamp.proto";

option go_package = "github.com/ictsc/ictsc-regalia/backend/pkg/proto/contestant/v1;contestantv1";

message Problem {
  // 問題コード
  string code = 1;
  // タイトル
  string title = 2;
  // 最大得点
  uint32 max_score = 3;
  // 問題カテゴリー
  string category = 4;

  optional Score score = 5;
  Deployment deployment = 6;
  ProblemBody body = 7;
}

message Score {
  // 採点による得点
  uint32 marked_score = 1;
  // ペナルティによる減点
  uint32 penalty = 2;
  // 最終的な得点
  uint32 score = 3;
  // 最大得点
  uint32 max_score = 4;
}

message Deployment {
  repeated DeploymentEvent events = 1;
  bool redeployable = 2;
}

message DeploymentEvent {
  // 何回目のリビジョンの情報か
  int64 revision = 1;
  google.protobuf.Timestamp occurred_at = 2;
  // 展開をした結果の総減点
  uint32 penalty = 3;
  DeploymentStatus type = 4;
}

enum DeploymentStatus {
  DEPLOYMENT_STATUS_UNSPECIFIED = 0;
  // 展開済み
  DEPLOYMENT_STATUS_DEPLOYED = 1;
  // 展開中
  DEPLOYMENT_STATUS_DEPLOYING = 2;
  // 展開失敗
  DEPLOYMENT_STATUS_FAILED = 3;
}

message ProblemBody {
  ProblemType type = 1;
  oneof body {
    DescriptiveProblem descriptive = 2;
  }
}

enum ProblemType {
  PROBLEM_TYPE_UNSPECIFIED = 0;
  PROBLEM_TYPE_DESCRIPTIVE = 1;
}

message DescriptiveProblem {
  // 問題文
  string body = 1;
}

message ListProblemsRequest {}
message ListProblemsResponse {
  repeated Problem problems = 1;
}

message GetProblemRequest {
  string code = 1;
}
message GetProblemResponse {
  Problem problem = 1;
}

message DeployRequest {
  string code = 1;
}
message DeployResponse {}

service ProblemService {
  rpc ListProblems(ListProblemsRequest) returns (ListProblemsResponse);
  rpc GetProblem(GetProblemRequest) returns (GetProblemResponse);
  rpc Deploy(DeployRequest) returns (DeployResponse);
}
