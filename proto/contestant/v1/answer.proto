syntax = "proto3";

package contestant.v1;

import "buf/validate/validate.proto";
import "contestant/v1/problem.proto";
import "google/protobuf/timestamp.proto";

option go_package = "github.com/ictsc/ictsc-outlands/backend/internal/proto/contestant/v1";

message QuestionAnswer {
  repeated int64 answer = 6 [(buf.validate.field).repeated = {
    unique: true
    min_items: 1
    max_items: 10
    items: {
      int64: {gte: 0}
    }
  }];
}

message MultipleChoiceAnswer {
  repeated QuestionAnswer question_answer = 1 [(buf.validate.field).repeated = {
    min_items: 1
    max_items: 10
  }];
}

message DescriptiveAnswer {
  string body = 1 [(buf.validate.field).string = {
    min_len: 1
    max_len: 1000
  }];
}

message Answer {
  string id = 1 [(buf.validate.field).string.len = 26];
  string problem_id = 2 [(buf.validate.field).string.len = 26];
  ProblemType problem_type = 3 [(buf.validate.field).enum.defined_only = true];
  oneof body {
    option (buf.validate.oneof).required = true;
    MultipleChoiceAnswer multiple_choice = 4;
    DescriptiveAnswer descriptive = 5;
  }
  optional int64 point = 6 [(buf.validate.field).int64.gte = 0];
  google.protobuf.Timestamp created_at = 7 [(buf.validate.field).required = true];
}

message GetAnswerRequest {
  string id = 1 [(buf.validate.field).string.len = 26];
}

message GetAnswerResponse {
  Answer answer = 1 [(buf.validate.field).required = true];
}

message GetAnswersRequest {
  string problem_id = 1 [(buf.validate.field).string.len = 26];
}

message GetAnswersResponse {
  repeated Answer answers = 1 [(buf.validate.field).required = true];
}

message PostAnswerRequest {
  string problem_id = 1 [(buf.validate.field).string.len = 26];
  ProblemType problem_type = 2 [(buf.validate.field).enum.defined_only = true];
  oneof body {
    option (buf.validate.oneof).required = true;
    MultipleChoiceAnswer multiple_choice = 3;
    DescriptiveAnswer descriptive = 4;
  }
}

message PostAnswerResponse {
  Answer answer = 1 [(buf.validate.field).required = true];
}

service AnswerService {
  rpc GetAnswer(GetAnswerRequest) returns (GetAnswerResponse);
  rpc GetAnswers(GetAnswersRequest) returns (GetAnswersResponse);
  rpc PostAnswer(PostAnswerRequest) returns (PostAnswerResponse);
}
