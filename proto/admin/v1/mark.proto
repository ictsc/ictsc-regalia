syntax = "proto3";

package admin.v1;

import "admin/v1/actor.proto";
import "admin/v1/contestant.proto";
import "admin/v1/problem.proto";
import "admin/v1/team.proto";
import "google/protobuf/timestamp.proto";

option go_package = "github.com/ictsc/ictsc-regalia/backend/pkg/proto/admin/v1;adminv1";

// 解答
message Answer {
  uint32 id = 1;
  Team team = 2;
  Contestant author = 3;
  Problem problem = 4;
  AnswerBody body = 5;
  google.protobuf.Timestamp created_at = 6;
  optional MarkingScore score = 7;
}

message AnswerBody {
  ProblemType type = 1;
  oneof body {
    DescriptiveAnswer descriptive = 2;
  }
}

message DescriptiveAnswer {
  string body = 1;
}

// 採点結果
message MarkingResult {
  string id = 6;
  Answer answer = 1;
  Admin judge = 2;
  uint32 score = 3;
  MarkingRationale rationale = 4;
  google.protobuf.Timestamp created_at = 5;
  MarkingResultVisibility visibility = 7;
}

enum MarkingResultVisibility {
  MARKING_RESULT_VISIBILITY_UNSPECIFIED = 0;
  // 参加者に見える
  MARKING_RESULT_VISIBILITY_PUBLIC = 1;
  // 参加者に見えない
  MARKING_RESULT_VISIBILITY_PRIVATE = 2;
}

message MarkingScore {
  uint32 total = 1;
  uint32 marked = 2;
  uint32 penalty = 3;
  uint32 max = 4;
}

message MarkingRationale {
  ProblemType type = 1;
  oneof body {
    DescriptiveMarkingRationale descriptive = 2;
  }
}

message DescriptiveMarkingRationale {
  string comment = 1;
}

message ListAnswersRequest {
  // 採点が完了した提出を含めるかどうか
  bool include_marked = 1;
}
message ListAnswersResponse {
  repeated Answer answers = 1;
}

message GetAnswerRequest {
  uint32 team_code = 1;
  string problem_code = 2;
  uint32 id = 3;
}
message GetAnswerResponse {
  Answer answer = 1;
}

message ListMarkingResultsRequest {
  MarkingResultVisibility visibility = 1;
}
message ListMarkingResultsResponse {
  repeated MarkingResult marking_results = 1;
}

message CreateMarkingResultRequest {
  MarkingResult marking_result = 1;
}
message CreateMarkingResultResponse {
  MarkingResult marking_result = 1;
}

// ビジネスロジックに沿って、採点結果の可視性を更新する
message UpdateMarkingResultVisibilitiesRequest {}
message UpdateMarkingResultVisibilitiesResponse {}

service MarkService {
  rpc ListAnswers(ListAnswersRequest) returns (ListAnswersResponse);
  rpc GetAnswer(GetAnswerRequest) returns (GetAnswerResponse);
  rpc ListMarkingResults(ListMarkingResultsRequest) returns (ListMarkingResultsResponse);
  rpc CreateMarkingResult(CreateMarkingResultRequest) returns (CreateMarkingResultResponse);
  rpc UpdateMarkingResultVisibilities(UpdateMarkingResultVisibilitiesRequest) returns (UpdateMarkingResultVisibilitiesResponse);
}
