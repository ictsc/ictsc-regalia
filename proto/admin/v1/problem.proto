syntax = "proto3";

package admin.v1;

import "buf/validate/validate.proto";

option go_package = "github.com/ictsc/ictsc-regalia/backend/pkg/proto/admin/v1;adminv1";

message Problem {
  // 問題コード
  string code = 1 [(buf.validate.field).string.min_len = 1];
  // タイトル
  string title = 2;
  // 最大得点
  uint32 max_score = 3;
  // 問題カテゴリー
  string category = 4;

  RedeployRule redeploy_rule = 5;

  ProblemBody body = 6;

  
}

enum RedeployRuleType {
  REDEPLOY_RULE_TYPE_UNSPECIFIED = 0;
  // 自動での再展開ができない問題
  REDEPLOY_RULE_TYPE_UNREDEPLOYABLE = 1;
  // 再展開に最大点数への割合ペナルティがある問題
  REDEPLOY_RULE_TYPE_PERCENTAGE_PENALTY = 2;
}

message RedeployRule {
  RedeployRuleType type = 1;
  // 再展開ペナルティの発生する再展開回数の閾値
  uint32 penalty_threshold = 2;
  // 再展開ペナルティの割合
  uint32 penalty_percentage = 3;
}

message ProblemBody {
  ProblemType type = 1;
  oneof body {
    DescriptiveProblem descriptive = 2;
  }
}

enum ProblemType {
  PROBLEM_TYPE_UNSPECIFIED = 0;
  PROBLEM_TYPE_DESCRIPTIVE = 1;
}

message DescriptiveProblem {
  // Growi のページのパス
  string page_path = 1;
  // Growi のページID
  string page_id = 2;
  // Markdown 形式の問題文
  string problem_markdown = 3;
  // Markdown 形式の解説文
  string explanation_markdown = 4;
}

message ListProblemsRequest {}
message ListProblemsResponse {
  repeated Problem problems = 1;
}

message GetProblemRequest {
  string code = 1;
}
message GetProblemResponse {
  Problem problem = 1;
}

message CreateProblemRequest {
  Problem problem = 1;
}
message CreateProblemResponse {
  Problem problem = 1;
}

message UpdateProblemRequest {
  Problem problem = 1;
}
message UpdateProblemResponse {
  Problem problem = 1;
}

message DeleteProblemRequest {
  string code = 1;
}
message DeleteProblemResponse {}

service ProblemService {
  rpc ListProblems(ListProblemsRequest) returns (ListProblemsResponse);
  rpc GetProblem(GetProblemRequest) returns (GetProblemResponse);
  rpc CreateProblem(CreateProblemRequest) returns (CreateProblemResponse);
  rpc UpdateProblem(UpdateProblemRequest) returns (UpdateProblemResponse);
  rpc DeleteProblem(DeleteProblemRequest) returns (DeleteProblemResponse);
}
