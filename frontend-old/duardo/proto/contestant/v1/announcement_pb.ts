// @generated by protoc-gen-es v1.7.2 with parameter "target=ts,import_extension=none"
// @generated from file contestant/v1/announcement.proto (package contestant.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, Timestamp } from "@bufbuild/protobuf";

/**
 * @generated from message contestant.v1.Announcement
 */
export class Announcement extends Message<Announcement> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * @generated from field: optional string problem_id = 2;
   */
  problemId?: string;

  /**
   * @generated from field: string title = 3;
   */
  title = "";

  /**
   * @generated from field: string body = 4;
   */
  body = "";

  /**
   * @generated from field: google.protobuf.Timestamp created_at = 5;
   */
  createdAt?: Timestamp;

  constructor(data?: PartialMessage<Announcement>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "contestant.v1.Announcement";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "problem_id", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 3, name: "title", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "body", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "created_at", kind: "message", T: Timestamp },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Announcement {
    return new Announcement().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Announcement {
    return new Announcement().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Announcement {
    return new Announcement().fromJsonString(jsonString, options);
  }

  static equals(a: Announcement | PlainMessage<Announcement> | undefined, b: Announcement | PlainMessage<Announcement> | undefined): boolean {
    return proto3.util.equals(Announcement, a, b);
  }
}

/**
 * @generated from message contestant.v1.GetAnnouncementsRequest
 */
export class GetAnnouncementsRequest extends Message<GetAnnouncementsRequest> {
  /**
   * @generated from field: optional string problem_id = 1;
   */
  problemId?: string;

  constructor(data?: PartialMessage<GetAnnouncementsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "contestant.v1.GetAnnouncementsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "problem_id", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetAnnouncementsRequest {
    return new GetAnnouncementsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetAnnouncementsRequest {
    return new GetAnnouncementsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetAnnouncementsRequest {
    return new GetAnnouncementsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetAnnouncementsRequest | PlainMessage<GetAnnouncementsRequest> | undefined, b: GetAnnouncementsRequest | PlainMessage<GetAnnouncementsRequest> | undefined): boolean {
    return proto3.util.equals(GetAnnouncementsRequest, a, b);
  }
}

/**
 * @generated from message contestant.v1.GetAnnouncementsResponse
 */
export class GetAnnouncementsResponse extends Message<GetAnnouncementsResponse> {
  /**
   * @generated from field: repeated contestant.v1.Announcement announcements = 1;
   */
  announcements: Announcement[] = [];

  constructor(data?: PartialMessage<GetAnnouncementsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "contestant.v1.GetAnnouncementsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "announcements", kind: "message", T: Announcement, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetAnnouncementsResponse {
    return new GetAnnouncementsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetAnnouncementsResponse {
    return new GetAnnouncementsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetAnnouncementsResponse {
    return new GetAnnouncementsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetAnnouncementsResponse | PlainMessage<GetAnnouncementsResponse> | undefined, b: GetAnnouncementsResponse | PlainMessage<GetAnnouncementsResponse> | undefined): boolean {
    return proto3.util.equals(GetAnnouncementsResponse, a, b);
  }
}

