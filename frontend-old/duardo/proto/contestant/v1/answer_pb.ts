// @generated by protoc-gen-es v1.7.2 with parameter "target=ts,import_extension=none"
// @generated from file contestant/v1/answer.proto (package contestant.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, Timestamp } from "@bufbuild/protobuf";
import { ProblemType } from "./problem_pb";

/**
 * @generated from message contestant.v1.QuestionAnswer
 */
export class QuestionAnswer extends Message<QuestionAnswer> {
  /**
   * @generated from field: repeated int32 answer = 6;
   */
  answer: number[] = [];

  constructor(data?: PartialMessage<QuestionAnswer>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "contestant.v1.QuestionAnswer";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 6, name: "answer", kind: "scalar", T: 5 /* ScalarType.INT32 */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QuestionAnswer {
    return new QuestionAnswer().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QuestionAnswer {
    return new QuestionAnswer().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QuestionAnswer {
    return new QuestionAnswer().fromJsonString(jsonString, options);
  }

  static equals(a: QuestionAnswer | PlainMessage<QuestionAnswer> | undefined, b: QuestionAnswer | PlainMessage<QuestionAnswer> | undefined): boolean {
    return proto3.util.equals(QuestionAnswer, a, b);
  }
}

/**
 * @generated from message contestant.v1.MultipleChoiceAnswer
 */
export class MultipleChoiceAnswer extends Message<MultipleChoiceAnswer> {
  /**
   * @generated from field: repeated contestant.v1.QuestionAnswer question_answer = 1;
   */
  questionAnswer: QuestionAnswer[] = [];

  constructor(data?: PartialMessage<MultipleChoiceAnswer>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "contestant.v1.MultipleChoiceAnswer";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "question_answer", kind: "message", T: QuestionAnswer, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MultipleChoiceAnswer {
    return new MultipleChoiceAnswer().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MultipleChoiceAnswer {
    return new MultipleChoiceAnswer().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MultipleChoiceAnswer {
    return new MultipleChoiceAnswer().fromJsonString(jsonString, options);
  }

  static equals(a: MultipleChoiceAnswer | PlainMessage<MultipleChoiceAnswer> | undefined, b: MultipleChoiceAnswer | PlainMessage<MultipleChoiceAnswer> | undefined): boolean {
    return proto3.util.equals(MultipleChoiceAnswer, a, b);
  }
}

/**
 * @generated from message contestant.v1.DescriptiveAnswer
 */
export class DescriptiveAnswer extends Message<DescriptiveAnswer> {
  /**
   * @generated from field: string body = 1;
   */
  body = "";

  constructor(data?: PartialMessage<DescriptiveAnswer>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "contestant.v1.DescriptiveAnswer";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "body", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DescriptiveAnswer {
    return new DescriptiveAnswer().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DescriptiveAnswer {
    return new DescriptiveAnswer().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DescriptiveAnswer {
    return new DescriptiveAnswer().fromJsonString(jsonString, options);
  }

  static equals(a: DescriptiveAnswer | PlainMessage<DescriptiveAnswer> | undefined, b: DescriptiveAnswer | PlainMessage<DescriptiveAnswer> | undefined): boolean {
    return proto3.util.equals(DescriptiveAnswer, a, b);
  }
}

/**
 * @generated from message contestant.v1.Answer
 */
export class Answer extends Message<Answer> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * @generated from field: string problem_id = 2;
   */
  problemId = "";

  /**
   * @generated from field: contestant.v1.ProblemType problem_type = 3;
   */
  problemType = ProblemType.UNSPECIFIED;

  /**
   * @generated from oneof contestant.v1.Answer.body
   */
  body: {
    /**
     * @generated from field: contestant.v1.MultipleChoiceAnswer multiple_choice = 4;
     */
    value: MultipleChoiceAnswer;
    case: "multipleChoice";
  } | {
    /**
     * @generated from field: contestant.v1.DescriptiveAnswer descriptive = 5;
     */
    value: DescriptiveAnswer;
    case: "descriptive";
  } | { case: undefined; value?: undefined } = { case: undefined };

  /**
   * @generated from field: optional int32 point = 6;
   */
  point?: number;

  /**
   * @generated from field: google.protobuf.Timestamp created_at = 7;
   */
  createdAt?: Timestamp;

  constructor(data?: PartialMessage<Answer>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "contestant.v1.Answer";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "problem_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "problem_type", kind: "enum", T: proto3.getEnumType(ProblemType) },
    { no: 4, name: "multiple_choice", kind: "message", T: MultipleChoiceAnswer, oneof: "body" },
    { no: 5, name: "descriptive", kind: "message", T: DescriptiveAnswer, oneof: "body" },
    { no: 6, name: "point", kind: "scalar", T: 5 /* ScalarType.INT32 */, opt: true },
    { no: 7, name: "created_at", kind: "message", T: Timestamp },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Answer {
    return new Answer().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Answer {
    return new Answer().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Answer {
    return new Answer().fromJsonString(jsonString, options);
  }

  static equals(a: Answer | PlainMessage<Answer> | undefined, b: Answer | PlainMessage<Answer> | undefined): boolean {
    return proto3.util.equals(Answer, a, b);
  }
}

/**
 * @generated from message contestant.v1.GetAnswerRequest
 */
export class GetAnswerRequest extends Message<GetAnswerRequest> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  constructor(data?: PartialMessage<GetAnswerRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "contestant.v1.GetAnswerRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetAnswerRequest {
    return new GetAnswerRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetAnswerRequest {
    return new GetAnswerRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetAnswerRequest {
    return new GetAnswerRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetAnswerRequest | PlainMessage<GetAnswerRequest> | undefined, b: GetAnswerRequest | PlainMessage<GetAnswerRequest> | undefined): boolean {
    return proto3.util.equals(GetAnswerRequest, a, b);
  }
}

/**
 * @generated from message contestant.v1.GetAnswerResponse
 */
export class GetAnswerResponse extends Message<GetAnswerResponse> {
  /**
   * @generated from field: contestant.v1.Answer answer = 1;
   */
  answer?: Answer;

  constructor(data?: PartialMessage<GetAnswerResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "contestant.v1.GetAnswerResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "answer", kind: "message", T: Answer },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetAnswerResponse {
    return new GetAnswerResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetAnswerResponse {
    return new GetAnswerResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetAnswerResponse {
    return new GetAnswerResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetAnswerResponse | PlainMessage<GetAnswerResponse> | undefined, b: GetAnswerResponse | PlainMessage<GetAnswerResponse> | undefined): boolean {
    return proto3.util.equals(GetAnswerResponse, a, b);
  }
}

/**
 * @generated from message contestant.v1.GetAnswersRequest
 */
export class GetAnswersRequest extends Message<GetAnswersRequest> {
  /**
   * @generated from field: string problem_id = 1;
   */
  problemId = "";

  constructor(data?: PartialMessage<GetAnswersRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "contestant.v1.GetAnswersRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "problem_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetAnswersRequest {
    return new GetAnswersRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetAnswersRequest {
    return new GetAnswersRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetAnswersRequest {
    return new GetAnswersRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetAnswersRequest | PlainMessage<GetAnswersRequest> | undefined, b: GetAnswersRequest | PlainMessage<GetAnswersRequest> | undefined): boolean {
    return proto3.util.equals(GetAnswersRequest, a, b);
  }
}

/**
 * @generated from message contestant.v1.GetAnswersResponse
 */
export class GetAnswersResponse extends Message<GetAnswersResponse> {
  /**
   * @generated from field: repeated contestant.v1.Answer answers = 1;
   */
  answers: Answer[] = [];

  constructor(data?: PartialMessage<GetAnswersResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "contestant.v1.GetAnswersResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "answers", kind: "message", T: Answer, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetAnswersResponse {
    return new GetAnswersResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetAnswersResponse {
    return new GetAnswersResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetAnswersResponse {
    return new GetAnswersResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetAnswersResponse | PlainMessage<GetAnswersResponse> | undefined, b: GetAnswersResponse | PlainMessage<GetAnswersResponse> | undefined): boolean {
    return proto3.util.equals(GetAnswersResponse, a, b);
  }
}

/**
 * @generated from message contestant.v1.PostAnswerRequest
 */
export class PostAnswerRequest extends Message<PostAnswerRequest> {
  /**
   * @generated from field: string problem_id = 1;
   */
  problemId = "";

  /**
   * @generated from field: contestant.v1.ProblemType problem_type = 2;
   */
  problemType = ProblemType.UNSPECIFIED;

  /**
   * @generated from oneof contestant.v1.PostAnswerRequest.body
   */
  body: {
    /**
     * @generated from field: contestant.v1.MultipleChoiceAnswer multiple_choice = 3;
     */
    value: MultipleChoiceAnswer;
    case: "multipleChoice";
  } | {
    /**
     * @generated from field: contestant.v1.DescriptiveAnswer descriptive = 4;
     */
    value: DescriptiveAnswer;
    case: "descriptive";
  } | { case: undefined; value?: undefined } = { case: undefined };

  constructor(data?: PartialMessage<PostAnswerRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "contestant.v1.PostAnswerRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "problem_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "problem_type", kind: "enum", T: proto3.getEnumType(ProblemType) },
    { no: 3, name: "multiple_choice", kind: "message", T: MultipleChoiceAnswer, oneof: "body" },
    { no: 4, name: "descriptive", kind: "message", T: DescriptiveAnswer, oneof: "body" },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PostAnswerRequest {
    return new PostAnswerRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PostAnswerRequest {
    return new PostAnswerRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PostAnswerRequest {
    return new PostAnswerRequest().fromJsonString(jsonString, options);
  }

  static equals(a: PostAnswerRequest | PlainMessage<PostAnswerRequest> | undefined, b: PostAnswerRequest | PlainMessage<PostAnswerRequest> | undefined): boolean {
    return proto3.util.equals(PostAnswerRequest, a, b);
  }
}

/**
 * @generated from message contestant.v1.PostAnswerResponse
 */
export class PostAnswerResponse extends Message<PostAnswerResponse> {
  /**
   * @generated from field: contestant.v1.Answer answer = 1;
   */
  answer?: Answer;

  constructor(data?: PartialMessage<PostAnswerResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "contestant.v1.PostAnswerResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "answer", kind: "message", T: Answer },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PostAnswerResponse {
    return new PostAnswerResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PostAnswerResponse {
    return new PostAnswerResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PostAnswerResponse {
    return new PostAnswerResponse().fromJsonString(jsonString, options);
  }

  static equals(a: PostAnswerResponse | PlainMessage<PostAnswerResponse> | undefined, b: PostAnswerResponse | PlainMessage<PostAnswerResponse> | undefined): boolean {
    return proto3.util.equals(PostAnswerResponse, a, b);
  }
}

