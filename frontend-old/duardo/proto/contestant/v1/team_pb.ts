// @generated by protoc-gen-es v1.7.2 with parameter "target=ts,import_extension=none"
// @generated from file contestant/v1/team.proto (package contestant.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";
import { User } from "./user_pb";

/**
 * @generated from message contestant.v1.Team
 */
export class Team extends Message<Team> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * @generated from field: int32 code = 2;
   */
  code = 0;

  /**
   * @generated from field: string name = 3;
   */
  name = "";

  /**
   * @generated from field: string organization = 4;
   */
  organization = "";

  constructor(data?: PartialMessage<Team>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "contestant.v1.Team";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "code", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 3, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "organization", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Team {
    return new Team().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Team {
    return new Team().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Team {
    return new Team().fromJsonString(jsonString, options);
  }

  static equals(a: Team | PlainMessage<Team> | undefined, b: Team | PlainMessage<Team> | undefined): boolean {
    return proto3.util.equals(Team, a, b);
  }
}

/**
 * @generated from message contestant.v1.GetTeamsRequest
 */
export class GetTeamsRequest extends Message<GetTeamsRequest> {
  constructor(data?: PartialMessage<GetTeamsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "contestant.v1.GetTeamsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetTeamsRequest {
    return new GetTeamsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetTeamsRequest {
    return new GetTeamsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetTeamsRequest {
    return new GetTeamsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetTeamsRequest | PlainMessage<GetTeamsRequest> | undefined, b: GetTeamsRequest | PlainMessage<GetTeamsRequest> | undefined): boolean {
    return proto3.util.equals(GetTeamsRequest, a, b);
  }
}

/**
 * @generated from message contestant.v1.GetTeamsResponse
 */
export class GetTeamsResponse extends Message<GetTeamsResponse> {
  /**
   * @generated from field: repeated contestant.v1.Team teams = 1;
   */
  teams: Team[] = [];

  constructor(data?: PartialMessage<GetTeamsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "contestant.v1.GetTeamsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "teams", kind: "message", T: Team, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetTeamsResponse {
    return new GetTeamsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetTeamsResponse {
    return new GetTeamsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetTeamsResponse {
    return new GetTeamsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetTeamsResponse | PlainMessage<GetTeamsResponse> | undefined, b: GetTeamsResponse | PlainMessage<GetTeamsResponse> | undefined): boolean {
    return proto3.util.equals(GetTeamsResponse, a, b);
  }
}

/**
 * @generated from message contestant.v1.GetTeamRequest
 */
export class GetTeamRequest extends Message<GetTeamRequest> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  constructor(data?: PartialMessage<GetTeamRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "contestant.v1.GetTeamRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetTeamRequest {
    return new GetTeamRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetTeamRequest {
    return new GetTeamRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetTeamRequest {
    return new GetTeamRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetTeamRequest | PlainMessage<GetTeamRequest> | undefined, b: GetTeamRequest | PlainMessage<GetTeamRequest> | undefined): boolean {
    return proto3.util.equals(GetTeamRequest, a, b);
  }
}

/**
 * @generated from message contestant.v1.GetTeamResponse
 */
export class GetTeamResponse extends Message<GetTeamResponse> {
  /**
   * @generated from field: contestant.v1.Team team = 1;
   */
  team?: Team;

  constructor(data?: PartialMessage<GetTeamResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "contestant.v1.GetTeamResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "team", kind: "message", T: Team },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetTeamResponse {
    return new GetTeamResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetTeamResponse {
    return new GetTeamResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetTeamResponse {
    return new GetTeamResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetTeamResponse | PlainMessage<GetTeamResponse> | undefined, b: GetTeamResponse | PlainMessage<GetTeamResponse> | undefined): boolean {
    return proto3.util.equals(GetTeamResponse, a, b);
  }
}

/**
 * @generated from message contestant.v1.GetTeamMembersRequest
 */
export class GetTeamMembersRequest extends Message<GetTeamMembersRequest> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  constructor(data?: PartialMessage<GetTeamMembersRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "contestant.v1.GetTeamMembersRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetTeamMembersRequest {
    return new GetTeamMembersRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetTeamMembersRequest {
    return new GetTeamMembersRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetTeamMembersRequest {
    return new GetTeamMembersRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetTeamMembersRequest | PlainMessage<GetTeamMembersRequest> | undefined, b: GetTeamMembersRequest | PlainMessage<GetTeamMembersRequest> | undefined): boolean {
    return proto3.util.equals(GetTeamMembersRequest, a, b);
  }
}

/**
 * @generated from message contestant.v1.GetTeamMembersResponse
 */
export class GetTeamMembersResponse extends Message<GetTeamMembersResponse> {
  /**
   * @generated from field: repeated contestant.v1.User members = 1;
   */
  members: User[] = [];

  constructor(data?: PartialMessage<GetTeamMembersResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "contestant.v1.GetTeamMembersResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "members", kind: "message", T: User, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetTeamMembersResponse {
    return new GetTeamMembersResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetTeamMembersResponse {
    return new GetTeamMembersResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetTeamMembersResponse {
    return new GetTeamMembersResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetTeamMembersResponse | PlainMessage<GetTeamMembersResponse> | undefined, b: GetTeamMembersResponse | PlainMessage<GetTeamMembersResponse> | undefined): boolean {
    return proto3.util.equals(GetTeamMembersResponse, a, b);
  }
}

/**
 * @generated from message contestant.v1.Bastion
 */
export class Bastion extends Message<Bastion> {
  /**
   * @generated from field: string user = 1;
   */
  user = "";

  /**
   * @generated from field: string password = 2;
   */
  password = "";

  /**
   * @generated from field: string host = 3;
   */
  host = "";

  /**
   * @generated from field: int32 port = 4;
   */
  port = 0;

  constructor(data?: PartialMessage<Bastion>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "contestant.v1.Bastion";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "password", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "host", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "port", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Bastion {
    return new Bastion().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Bastion {
    return new Bastion().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Bastion {
    return new Bastion().fromJsonString(jsonString, options);
  }

  static equals(a: Bastion | PlainMessage<Bastion> | undefined, b: Bastion | PlainMessage<Bastion> | undefined): boolean {
    return proto3.util.equals(Bastion, a, b);
  }
}

/**
 * @generated from message contestant.v1.GetConnectionInfoRequest
 */
export class GetConnectionInfoRequest extends Message<GetConnectionInfoRequest> {
  constructor(data?: PartialMessage<GetConnectionInfoRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "contestant.v1.GetConnectionInfoRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetConnectionInfoRequest {
    return new GetConnectionInfoRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetConnectionInfoRequest {
    return new GetConnectionInfoRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetConnectionInfoRequest {
    return new GetConnectionInfoRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetConnectionInfoRequest | PlainMessage<GetConnectionInfoRequest> | undefined, b: GetConnectionInfoRequest | PlainMessage<GetConnectionInfoRequest> | undefined): boolean {
    return proto3.util.equals(GetConnectionInfoRequest, a, b);
  }
}

/**
 * @generated from message contestant.v1.GetConnectionInfoResponse
 */
export class GetConnectionInfoResponse extends Message<GetConnectionInfoResponse> {
  /**
   * @generated from field: contestant.v1.Bastion bastion = 1;
   */
  bastion?: Bastion;

  constructor(data?: PartialMessage<GetConnectionInfoResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "contestant.v1.GetConnectionInfoResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "bastion", kind: "message", T: Bastion },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetConnectionInfoResponse {
    return new GetConnectionInfoResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetConnectionInfoResponse {
    return new GetConnectionInfoResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetConnectionInfoResponse {
    return new GetConnectionInfoResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetConnectionInfoResponse | PlainMessage<GetConnectionInfoResponse> | undefined, b: GetConnectionInfoResponse | PlainMessage<GetConnectionInfoResponse> | undefined): boolean {
    return proto3.util.equals(GetConnectionInfoResponse, a, b);
  }
}

