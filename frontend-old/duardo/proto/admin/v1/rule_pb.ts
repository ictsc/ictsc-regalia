// @generated by protoc-gen-es v1.7.2 with parameter "target=ts,import_extension=none"
// @generated from file admin/v1/rule.proto (package admin.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";

/**
 * @generated from message admin.v1.Rule
 */
export class Rule extends Message<Rule> {
  /**
   * @generated from field: string rule = 1;
   */
  rule = "";

  /**
   * @generated from field: string short_rule = 2;
   */
  shortRule = "";

  /**
   * @generated from field: string recreation_rule = 3;
   */
  recreationRule = "";

  constructor(data?: PartialMessage<Rule>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "admin.v1.Rule";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "rule", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "short_rule", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "recreation_rule", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Rule {
    return new Rule().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Rule {
    return new Rule().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Rule {
    return new Rule().fromJsonString(jsonString, options);
  }

  static equals(a: Rule | PlainMessage<Rule> | undefined, b: Rule | PlainMessage<Rule> | undefined): boolean {
    return proto3.util.equals(Rule, a, b);
  }
}

/**
 * @generated from message admin.v1.GetRuleRequest
 */
export class GetRuleRequest extends Message<GetRuleRequest> {
  constructor(data?: PartialMessage<GetRuleRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "admin.v1.GetRuleRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetRuleRequest {
    return new GetRuleRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetRuleRequest {
    return new GetRuleRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetRuleRequest {
    return new GetRuleRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetRuleRequest | PlainMessage<GetRuleRequest> | undefined, b: GetRuleRequest | PlainMessage<GetRuleRequest> | undefined): boolean {
    return proto3.util.equals(GetRuleRequest, a, b);
  }
}

/**
 * @generated from message admin.v1.GetRuleResponse
 */
export class GetRuleResponse extends Message<GetRuleResponse> {
  /**
   * @generated from field: admin.v1.Rule rule = 1;
   */
  rule?: Rule;

  constructor(data?: PartialMessage<GetRuleResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "admin.v1.GetRuleResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "rule", kind: "message", T: Rule },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetRuleResponse {
    return new GetRuleResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetRuleResponse {
    return new GetRuleResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetRuleResponse {
    return new GetRuleResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetRuleResponse | PlainMessage<GetRuleResponse> | undefined, b: GetRuleResponse | PlainMessage<GetRuleResponse> | undefined): boolean {
    return proto3.util.equals(GetRuleResponse, a, b);
  }
}

/**
 * @generated from message admin.v1.PatchRuleRequest
 */
export class PatchRuleRequest extends Message<PatchRuleRequest> {
  /**
   * @generated from field: optional string rule = 1;
   */
  rule?: string;

  /**
   * @generated from field: optional string short_rule = 2;
   */
  shortRule?: string;

  /**
   * @generated from field: optional string recreation_rule = 3;
   */
  recreationRule?: string;

  constructor(data?: PartialMessage<PatchRuleRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "admin.v1.PatchRuleRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "rule", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 2, name: "short_rule", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 3, name: "recreation_rule", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PatchRuleRequest {
    return new PatchRuleRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PatchRuleRequest {
    return new PatchRuleRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PatchRuleRequest {
    return new PatchRuleRequest().fromJsonString(jsonString, options);
  }

  static equals(a: PatchRuleRequest | PlainMessage<PatchRuleRequest> | undefined, b: PatchRuleRequest | PlainMessage<PatchRuleRequest> | undefined): boolean {
    return proto3.util.equals(PatchRuleRequest, a, b);
  }
}

/**
 * @generated from message admin.v1.PatchRuleResponse
 */
export class PatchRuleResponse extends Message<PatchRuleResponse> {
  /**
   * @generated from field: admin.v1.Rule rule = 1;
   */
  rule?: Rule;

  constructor(data?: PartialMessage<PatchRuleResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "admin.v1.PatchRuleResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "rule", kind: "message", T: Rule },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PatchRuleResponse {
    return new PatchRuleResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PatchRuleResponse {
    return new PatchRuleResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PatchRuleResponse {
    return new PatchRuleResponse().fromJsonString(jsonString, options);
  }

  static equals(a: PatchRuleResponse | PlainMessage<PatchRuleResponse> | undefined, b: PatchRuleResponse | PlainMessage<PatchRuleResponse> | undefined): boolean {
    return proto3.util.equals(PatchRuleResponse, a, b);
  }
}

