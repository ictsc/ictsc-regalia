// @generated by protoc-gen-es v1.7.2 with parameter "target=ts,import_extension=none"
// @generated from file admin/v1/admin.proto (package admin.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";

/**
 * @generated from message admin.v1.Admin
 */
export class Admin extends Message<Admin> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * @generated from field: string name = 2;
   */
  name = "";

  constructor(data?: PartialMessage<Admin>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "admin.v1.Admin";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Admin {
    return new Admin().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Admin {
    return new Admin().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Admin {
    return new Admin().fromJsonString(jsonString, options);
  }

  static equals(a: Admin | PlainMessage<Admin> | undefined, b: Admin | PlainMessage<Admin> | undefined): boolean {
    return proto3.util.equals(Admin, a, b);
  }
}

/**
 * @generated from message admin.v1.GetMeRequest
 */
export class GetMeRequest extends Message<GetMeRequest> {
  constructor(data?: PartialMessage<GetMeRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "admin.v1.GetMeRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetMeRequest {
    return new GetMeRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetMeRequest {
    return new GetMeRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetMeRequest {
    return new GetMeRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetMeRequest | PlainMessage<GetMeRequest> | undefined, b: GetMeRequest | PlainMessage<GetMeRequest> | undefined): boolean {
    return proto3.util.equals(GetMeRequest, a, b);
  }
}

/**
 * @generated from message admin.v1.GetMeResponse
 */
export class GetMeResponse extends Message<GetMeResponse> {
  /**
   * @generated from field: admin.v1.Admin admin = 1;
   */
  admin?: Admin;

  constructor(data?: PartialMessage<GetMeResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "admin.v1.GetMeResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "admin", kind: "message", T: Admin },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetMeResponse {
    return new GetMeResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetMeResponse {
    return new GetMeResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetMeResponse {
    return new GetMeResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetMeResponse | PlainMessage<GetMeResponse> | undefined, b: GetMeResponse | PlainMessage<GetMeResponse> | undefined): boolean {
    return proto3.util.equals(GetMeResponse, a, b);
  }
}

/**
 * @generated from message admin.v1.GetAdminRequest
 */
export class GetAdminRequest extends Message<GetAdminRequest> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  constructor(data?: PartialMessage<GetAdminRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "admin.v1.GetAdminRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetAdminRequest {
    return new GetAdminRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetAdminRequest {
    return new GetAdminRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetAdminRequest {
    return new GetAdminRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetAdminRequest | PlainMessage<GetAdminRequest> | undefined, b: GetAdminRequest | PlainMessage<GetAdminRequest> | undefined): boolean {
    return proto3.util.equals(GetAdminRequest, a, b);
  }
}

/**
 * @generated from message admin.v1.GetAdminResponse
 */
export class GetAdminResponse extends Message<GetAdminResponse> {
  /**
   * @generated from field: admin.v1.Admin admin = 1;
   */
  admin?: Admin;

  constructor(data?: PartialMessage<GetAdminResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "admin.v1.GetAdminResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "admin", kind: "message", T: Admin },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetAdminResponse {
    return new GetAdminResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetAdminResponse {
    return new GetAdminResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetAdminResponse {
    return new GetAdminResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetAdminResponse | PlainMessage<GetAdminResponse> | undefined, b: GetAdminResponse | PlainMessage<GetAdminResponse> | undefined): boolean {
    return proto3.util.equals(GetAdminResponse, a, b);
  }
}

/**
 * @generated from message admin.v1.GetAdminsRequest
 */
export class GetAdminsRequest extends Message<GetAdminsRequest> {
  constructor(data?: PartialMessage<GetAdminsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "admin.v1.GetAdminsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetAdminsRequest {
    return new GetAdminsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetAdminsRequest {
    return new GetAdminsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetAdminsRequest {
    return new GetAdminsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetAdminsRequest | PlainMessage<GetAdminsRequest> | undefined, b: GetAdminsRequest | PlainMessage<GetAdminsRequest> | undefined): boolean {
    return proto3.util.equals(GetAdminsRequest, a, b);
  }
}

/**
 * @generated from message admin.v1.GetAdminsResponse
 */
export class GetAdminsResponse extends Message<GetAdminsResponse> {
  /**
   * @generated from field: repeated admin.v1.Admin admins = 1;
   */
  admins: Admin[] = [];

  constructor(data?: PartialMessage<GetAdminsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "admin.v1.GetAdminsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "admins", kind: "message", T: Admin, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetAdminsResponse {
    return new GetAdminsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetAdminsResponse {
    return new GetAdminsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetAdminsResponse {
    return new GetAdminsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetAdminsResponse | PlainMessage<GetAdminsResponse> | undefined, b: GetAdminsResponse | PlainMessage<GetAdminsResponse> | undefined): boolean {
    return proto3.util.equals(GetAdminsResponse, a, b);
  }
}

/**
 * @generated from message admin.v1.PostAdminRequest
 */
export class PostAdminRequest extends Message<PostAdminRequest> {
  /**
   * @generated from field: string name = 1;
   */
  name = "";

  constructor(data?: PartialMessage<PostAdminRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "admin.v1.PostAdminRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PostAdminRequest {
    return new PostAdminRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PostAdminRequest {
    return new PostAdminRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PostAdminRequest {
    return new PostAdminRequest().fromJsonString(jsonString, options);
  }

  static equals(a: PostAdminRequest | PlainMessage<PostAdminRequest> | undefined, b: PostAdminRequest | PlainMessage<PostAdminRequest> | undefined): boolean {
    return proto3.util.equals(PostAdminRequest, a, b);
  }
}

/**
 * @generated from message admin.v1.PostAdminResponse
 */
export class PostAdminResponse extends Message<PostAdminResponse> {
  /**
   * @generated from field: admin.v1.Admin admin = 1;
   */
  admin?: Admin;

  constructor(data?: PartialMessage<PostAdminResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "admin.v1.PostAdminResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "admin", kind: "message", T: Admin },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PostAdminResponse {
    return new PostAdminResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PostAdminResponse {
    return new PostAdminResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PostAdminResponse {
    return new PostAdminResponse().fromJsonString(jsonString, options);
  }

  static equals(a: PostAdminResponse | PlainMessage<PostAdminResponse> | undefined, b: PostAdminResponse | PlainMessage<PostAdminResponse> | undefined): boolean {
    return proto3.util.equals(PostAdminResponse, a, b);
  }
}

/**
 * @generated from message admin.v1.PatchMeRequest
 */
export class PatchMeRequest extends Message<PatchMeRequest> {
  /**
   * @generated from field: string name = 1;
   */
  name = "";

  constructor(data?: PartialMessage<PatchMeRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "admin.v1.PatchMeRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PatchMeRequest {
    return new PatchMeRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PatchMeRequest {
    return new PatchMeRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PatchMeRequest {
    return new PatchMeRequest().fromJsonString(jsonString, options);
  }

  static equals(a: PatchMeRequest | PlainMessage<PatchMeRequest> | undefined, b: PatchMeRequest | PlainMessage<PatchMeRequest> | undefined): boolean {
    return proto3.util.equals(PatchMeRequest, a, b);
  }
}

/**
 * @generated from message admin.v1.PatchMeResponse
 */
export class PatchMeResponse extends Message<PatchMeResponse> {
  /**
   * @generated from field: admin.v1.Admin admin = 1;
   */
  admin?: Admin;

  constructor(data?: PartialMessage<PatchMeResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "admin.v1.PatchMeResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "admin", kind: "message", T: Admin },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PatchMeResponse {
    return new PatchMeResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PatchMeResponse {
    return new PatchMeResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PatchMeResponse {
    return new PatchMeResponse().fromJsonString(jsonString, options);
  }

  static equals(a: PatchMeResponse | PlainMessage<PatchMeResponse> | undefined, b: PatchMeResponse | PlainMessage<PatchMeResponse> | undefined): boolean {
    return proto3.util.equals(PatchMeResponse, a, b);
  }
}

