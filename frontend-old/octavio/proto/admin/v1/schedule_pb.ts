// @generated by protoc-gen-es v1.7.2 with parameter "target=ts,import_extension=none"
// @generated from file admin/v1/schedule.proto (package admin.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, Timestamp } from "@bufbuild/protobuf";

/**
 * @generated from enum admin.v1.Rounds
 */
export enum Rounds {
  /**
   * @generated from enum value: ROUNDS_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * @generated from enum value: ROUNDS_QUALIFYING = 1;
   */
  QUALIFYING = 1,

  /**
   * @generated from enum value: ROUNDS_FINALS = 2;
   */
  FINALS = 2,
}
// Retrieve enum metadata with: proto3.getEnumType(Rounds)
proto3.util.setEnumType(Rounds, "admin.v1.Rounds", [
  { no: 0, name: "ROUNDS_UNSPECIFIED" },
  { no: 1, name: "ROUNDS_QUALIFYING" },
  { no: 2, name: "ROUNDS_FINALS" },
]);

/**
 * @generated from message admin.v1.Schedule
 */
export class Schedule extends Message<Schedule> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * @generated from field: string name = 2;
   */
  name = "";

  /**
   * @generated from field: admin.v1.Rounds round = 3;
   */
  round = Rounds.UNSPECIFIED;

  /**
   * @generated from field: google.protobuf.Timestamp start_at = 4;
   */
  startAt?: Timestamp;

  /**
   * @generated from field: google.protobuf.Timestamp end_at = 5;
   */
  endAt?: Timestamp;

  constructor(data?: PartialMessage<Schedule>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "admin.v1.Schedule";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "round", kind: "enum", T: proto3.getEnumType(Rounds) },
    { no: 4, name: "start_at", kind: "message", T: Timestamp },
    { no: 5, name: "end_at", kind: "message", T: Timestamp },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Schedule {
    return new Schedule().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Schedule {
    return new Schedule().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Schedule {
    return new Schedule().fromJsonString(jsonString, options);
  }

  static equals(a: Schedule | PlainMessage<Schedule> | undefined, b: Schedule | PlainMessage<Schedule> | undefined): boolean {
    return proto3.util.equals(Schedule, a, b);
  }
}

/**
 * @generated from message admin.v1.GetSchedulesRequest
 */
export class GetSchedulesRequest extends Message<GetSchedulesRequest> {
  constructor(data?: PartialMessage<GetSchedulesRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "admin.v1.GetSchedulesRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetSchedulesRequest {
    return new GetSchedulesRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetSchedulesRequest {
    return new GetSchedulesRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetSchedulesRequest {
    return new GetSchedulesRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetSchedulesRequest | PlainMessage<GetSchedulesRequest> | undefined, b: GetSchedulesRequest | PlainMessage<GetSchedulesRequest> | undefined): boolean {
    return proto3.util.equals(GetSchedulesRequest, a, b);
  }
}

/**
 * @generated from message admin.v1.GetSchedulesResponse
 */
export class GetSchedulesResponse extends Message<GetSchedulesResponse> {
  /**
   * @generated from field: repeated admin.v1.Schedule schedules = 1;
   */
  schedules: Schedule[] = [];

  constructor(data?: PartialMessage<GetSchedulesResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "admin.v1.GetSchedulesResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "schedules", kind: "message", T: Schedule, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetSchedulesResponse {
    return new GetSchedulesResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetSchedulesResponse {
    return new GetSchedulesResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetSchedulesResponse {
    return new GetSchedulesResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetSchedulesResponse | PlainMessage<GetSchedulesResponse> | undefined, b: GetSchedulesResponse | PlainMessage<GetSchedulesResponse> | undefined): boolean {
    return proto3.util.equals(GetSchedulesResponse, a, b);
  }
}

/**
 * @generated from message admin.v1.PatchScheduleRequest
 */
export class PatchScheduleRequest extends Message<PatchScheduleRequest> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * @generated from field: optional string name = 2;
   */
  name?: string;

  /**
   * @generated from field: optional admin.v1.Rounds round = 3;
   */
  round?: Rounds;

  /**
   * @generated from field: optional google.protobuf.Timestamp start_at = 4;
   */
  startAt?: Timestamp;

  /**
   * @generated from field: optional google.protobuf.Timestamp end_at = 5;
   */
  endAt?: Timestamp;

  constructor(data?: PartialMessage<PatchScheduleRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "admin.v1.PatchScheduleRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 3, name: "round", kind: "enum", T: proto3.getEnumType(Rounds), opt: true },
    { no: 4, name: "start_at", kind: "message", T: Timestamp, opt: true },
    { no: 5, name: "end_at", kind: "message", T: Timestamp, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PatchScheduleRequest {
    return new PatchScheduleRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PatchScheduleRequest {
    return new PatchScheduleRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PatchScheduleRequest {
    return new PatchScheduleRequest().fromJsonString(jsonString, options);
  }

  static equals(a: PatchScheduleRequest | PlainMessage<PatchScheduleRequest> | undefined, b: PatchScheduleRequest | PlainMessage<PatchScheduleRequest> | undefined): boolean {
    return proto3.util.equals(PatchScheduleRequest, a, b);
  }
}

/**
 * @generated from message admin.v1.PatchScheduleResponse
 */
export class PatchScheduleResponse extends Message<PatchScheduleResponse> {
  /**
   * @generated from field: admin.v1.Schedule schedule = 1;
   */
  schedule?: Schedule;

  constructor(data?: PartialMessage<PatchScheduleResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "admin.v1.PatchScheduleResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "schedule", kind: "message", T: Schedule },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PatchScheduleResponse {
    return new PatchScheduleResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PatchScheduleResponse {
    return new PatchScheduleResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PatchScheduleResponse {
    return new PatchScheduleResponse().fromJsonString(jsonString, options);
  }

  static equals(a: PatchScheduleResponse | PlainMessage<PatchScheduleResponse> | undefined, b: PatchScheduleResponse | PlainMessage<PatchScheduleResponse> | undefined): boolean {
    return proto3.util.equals(PatchScheduleResponse, a, b);
  }
}

/**
 * @generated from message admin.v1.PostScheduleRequest
 */
export class PostScheduleRequest extends Message<PostScheduleRequest> {
  /**
   * @generated from field: string name = 1;
   */
  name = "";

  /**
   * @generated from field: admin.v1.Rounds round = 2;
   */
  round = Rounds.UNSPECIFIED;

  /**
   * @generated from field: google.protobuf.Timestamp start_at = 3;
   */
  startAt?: Timestamp;

  /**
   * @generated from field: google.protobuf.Timestamp end_at = 4;
   */
  endAt?: Timestamp;

  constructor(data?: PartialMessage<PostScheduleRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "admin.v1.PostScheduleRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "round", kind: "enum", T: proto3.getEnumType(Rounds) },
    { no: 3, name: "start_at", kind: "message", T: Timestamp },
    { no: 4, name: "end_at", kind: "message", T: Timestamp },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PostScheduleRequest {
    return new PostScheduleRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PostScheduleRequest {
    return new PostScheduleRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PostScheduleRequest {
    return new PostScheduleRequest().fromJsonString(jsonString, options);
  }

  static equals(a: PostScheduleRequest | PlainMessage<PostScheduleRequest> | undefined, b: PostScheduleRequest | PlainMessage<PostScheduleRequest> | undefined): boolean {
    return proto3.util.equals(PostScheduleRequest, a, b);
  }
}

/**
 * @generated from message admin.v1.PostScheduleResponse
 */
export class PostScheduleResponse extends Message<PostScheduleResponse> {
  /**
   * @generated from field: admin.v1.Schedule schedule = 1;
   */
  schedule?: Schedule;

  constructor(data?: PartialMessage<PostScheduleResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "admin.v1.PostScheduleResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "schedule", kind: "message", T: Schedule },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PostScheduleResponse {
    return new PostScheduleResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PostScheduleResponse {
    return new PostScheduleResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PostScheduleResponse {
    return new PostScheduleResponse().fromJsonString(jsonString, options);
  }

  static equals(a: PostScheduleResponse | PlainMessage<PostScheduleResponse> | undefined, b: PostScheduleResponse | PlainMessage<PostScheduleResponse> | undefined): boolean {
    return proto3.util.equals(PostScheduleResponse, a, b);
  }
}

/**
 * @generated from message admin.v1.DeleteScheduleRequest
 */
export class DeleteScheduleRequest extends Message<DeleteScheduleRequest> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  constructor(data?: PartialMessage<DeleteScheduleRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "admin.v1.DeleteScheduleRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeleteScheduleRequest {
    return new DeleteScheduleRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeleteScheduleRequest {
    return new DeleteScheduleRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeleteScheduleRequest {
    return new DeleteScheduleRequest().fromJsonString(jsonString, options);
  }

  static equals(a: DeleteScheduleRequest | PlainMessage<DeleteScheduleRequest> | undefined, b: DeleteScheduleRequest | PlainMessage<DeleteScheduleRequest> | undefined): boolean {
    return proto3.util.equals(DeleteScheduleRequest, a, b);
  }
}

/**
 * @generated from message admin.v1.DeleteScheduleResponse
 */
export class DeleteScheduleResponse extends Message<DeleteScheduleResponse> {
  constructor(data?: PartialMessage<DeleteScheduleResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "admin.v1.DeleteScheduleResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeleteScheduleResponse {
    return new DeleteScheduleResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeleteScheduleResponse {
    return new DeleteScheduleResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeleteScheduleResponse {
    return new DeleteScheduleResponse().fromJsonString(jsonString, options);
  }

  static equals(a: DeleteScheduleResponse | PlainMessage<DeleteScheduleResponse> | undefined, b: DeleteScheduleResponse | PlainMessage<DeleteScheduleResponse> | undefined): boolean {
    return proto3.util.equals(DeleteScheduleResponse, a, b);
  }
}

