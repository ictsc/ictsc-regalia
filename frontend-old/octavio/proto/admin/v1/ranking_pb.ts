// @generated by protoc-gen-es v1.7.2 with parameter "target=ts,import_extension=none"
// @generated from file admin/v1/ranking.proto (package admin.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";
import { Team } from "./team_pb";

/**
 * @generated from message admin.v1.Rank
 */
export class Rank extends Message<Rank> {
  /**
   * @generated from field: int32 rank = 1;
   */
  rank = 0;

  /**
   * @generated from field: admin.v1.Team team = 2;
   */
  team?: Team;

  /**
   * @generated from field: int32 point = 3;
   */
  point = 0;

  constructor(data?: PartialMessage<Rank>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "admin.v1.Rank";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "rank", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 2, name: "team", kind: "message", T: Team },
    { no: 3, name: "point", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Rank {
    return new Rank().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Rank {
    return new Rank().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Rank {
    return new Rank().fromJsonString(jsonString, options);
  }

  static equals(a: Rank | PlainMessage<Rank> | undefined, b: Rank | PlainMessage<Rank> | undefined): boolean {
    return proto3.util.equals(Rank, a, b);
  }
}

/**
 * @generated from message admin.v1.GetRankingRequest
 */
export class GetRankingRequest extends Message<GetRankingRequest> {
  /**
   * @generated from field: bool unpublished = 1;
   */
  unpublished = false;

  constructor(data?: PartialMessage<GetRankingRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "admin.v1.GetRankingRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "unpublished", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetRankingRequest {
    return new GetRankingRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetRankingRequest {
    return new GetRankingRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetRankingRequest {
    return new GetRankingRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetRankingRequest | PlainMessage<GetRankingRequest> | undefined, b: GetRankingRequest | PlainMessage<GetRankingRequest> | undefined): boolean {
    return proto3.util.equals(GetRankingRequest, a, b);
  }
}

/**
 * @generated from message admin.v1.GetRankingResponse
 */
export class GetRankingResponse extends Message<GetRankingResponse> {
  /**
   * @generated from field: repeated admin.v1.Rank ranking = 1;
   */
  ranking: Rank[] = [];

  constructor(data?: PartialMessage<GetRankingResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "admin.v1.GetRankingResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "ranking", kind: "message", T: Rank, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetRankingResponse {
    return new GetRankingResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetRankingResponse {
    return new GetRankingResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetRankingResponse {
    return new GetRankingResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetRankingResponse | PlainMessage<GetRankingResponse> | undefined, b: GetRankingResponse | PlainMessage<GetRankingResponse> | undefined): boolean {
    return proto3.util.equals(GetRankingResponse, a, b);
  }
}

