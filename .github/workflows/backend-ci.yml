name: Backend CI Pipeline

on:
  push:
    branches:
      - main
  pull_request:

defaults:
  run:
    working-directory: backend

jobs:
  lint:
    name: Lint
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Run golangci-lint
        uses: reviewdog/action-golangci-lint@v2
        with:
          go_version_file: backend/go.mod
          workdir: backend
          level: warning
          fail_on_error: true # deprecated
          filter_mode: nofilter
          golangci_lint_flags: --timeout=10m
  generation:
    name: Generation
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Setup Go
        uses: ./.github/actions/setup-go
      - name: Restore Cache
        id: go-generate-cache
        uses: actions/cache/restore@v4
        with:
          path: ~/.cache/go-build
          key: go-generate-${{ hashFiles('backend/go.sum') }}
          restore-keys: go-generate-
      - name: Go Generate
        run: go generate -x ./...
      - name: Check Diff
        run: git diff --exit-code
      - name: Save Cache
        uses: actions/cache/save@v4
        if: >-
          always() && steps.go-generate-cache.outputs.cache-hit != 'true'
          && github.ref == format('refs/heads/{0}', github.event.repository.default_branch)
        with:
          path: ~/.cache/go-build
          key: ${{ steps.go-generate-cache.outputs.cache-primary-key }}
  test:
    name: Test
    needs: [test-go, test-schema]
    runs-on: ubuntu-latest
    steps:
      - run: echo
        working-directory: /
  test-go:
    name: Test Go
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Setup Go
        uses: ./.github/actions/setup-go
      - uses: actions/cache/restore@v4
        id: go-build-cache
        with:
          path: ~/.cache/go-build
          key: go-build-${{ hashFiles('backend/go.sum') }}
          restore-keys: |
            go-build-
      - name: Run Test
        run: go test -race -shuffle on -parallel 8 -v ./...
      - uses: actions/cache/save@v4
        if: >-
          always() && steps.go-build-cache.outputs.cache-hit != 'true'
          && github.ref == format('refs/heads/{0}', github.event.repository.default_branch)
        with:
          path: ~/.cache/go-build
          key: ${{ steps.go-build-cache.outputs.cache-primary-key }}
  test-schema:
    name: Test Schema
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:17
        env:
          POSTGRES_PASSWORD: password
          POSTGRES_USER: ictsc
          POSTGRES_DB: ictscore
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    env:
      PGHOST: localhost
      PGPORT: "5432"
      PGUSER: ictsc
      PGPASSWORD: password
      PGDATABASE: ictscore
    steps:
      - name: Checkout Default Branch
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.repository.default_branch }}

      - name: Setup Go
        uses: ./.github/actions/setup-go
      - name: Restore Cache
        id: sqldef-cache
        uses: actions/cache/restore@v4
        with:
          path: ~/.cache/go-build
          key: sqldef-cache-${{ hashFiles('backend/go.sum') }}
          restore-keys: sqldef-cache-

      - name: Run Migration With Default Branch
        run: ./scripts/migrate

      - name: Checkout
        uses: actions/checkout@v4

      - name: Run Migration
        run: ./scripts/migrate

      - name: Save Cache
        uses: actions/cache/save@v4
        if: >-
          always() && steps.sqldef-cache.outputs.cache-hit != 'true'
          && github.ref == format('refs/heads/{0}', github.event.repository.default_branch)
        with:
          path: ~/.cache/go-build
          key: ${{ steps.sqldef-cache.outputs.cache-primary-key }}
