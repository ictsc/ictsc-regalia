// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: contestant/v1/answer.proto

package contestantv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/ictsc/ictsc-regalia/backend/pkg/proto/contestant/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// AnswerServiceName is the fully-qualified name of the AnswerService service.
	AnswerServiceName = "contestant.v1.AnswerService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// AnswerServiceListAnswersProcedure is the fully-qualified name of the AnswerService's ListAnswers
	// RPC.
	AnswerServiceListAnswersProcedure = "/contestant.v1.AnswerService/ListAnswers"
	// AnswerServiceSubmitAnswerProcedure is the fully-qualified name of the AnswerService's
	// SubmitAnswer RPC.
	AnswerServiceSubmitAnswerProcedure = "/contestant.v1.AnswerService/SubmitAnswer"
	// AnswerServiceGetAnswerProcedure is the fully-qualified name of the AnswerService's GetAnswer RPC.
	AnswerServiceGetAnswerProcedure = "/contestant.v1.AnswerService/GetAnswer"
)

// AnswerServiceClient is a client for the contestant.v1.AnswerService service.
type AnswerServiceClient interface {
	ListAnswers(context.Context, *connect.Request[v1.ListAnswersRequest]) (*connect.Response[v1.ListAnswersResponse], error)
	SubmitAnswer(context.Context, *connect.Request[v1.SubmitAnswerRequest]) (*connect.Response[v1.SubmitAnswerResponse], error)
	GetAnswer(context.Context, *connect.Request[v1.GetAnswerRequest]) (*connect.Response[v1.GetAnswerResponse], error)
}

// NewAnswerServiceClient constructs a client for the contestant.v1.AnswerService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewAnswerServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) AnswerServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	answerServiceMethods := v1.File_contestant_v1_answer_proto.Services().ByName("AnswerService").Methods()
	return &answerServiceClient{
		listAnswers: connect.NewClient[v1.ListAnswersRequest, v1.ListAnswersResponse](
			httpClient,
			baseURL+AnswerServiceListAnswersProcedure,
			connect.WithSchema(answerServiceMethods.ByName("ListAnswers")),
			connect.WithClientOptions(opts...),
		),
		submitAnswer: connect.NewClient[v1.SubmitAnswerRequest, v1.SubmitAnswerResponse](
			httpClient,
			baseURL+AnswerServiceSubmitAnswerProcedure,
			connect.WithSchema(answerServiceMethods.ByName("SubmitAnswer")),
			connect.WithClientOptions(opts...),
		),
		getAnswer: connect.NewClient[v1.GetAnswerRequest, v1.GetAnswerResponse](
			httpClient,
			baseURL+AnswerServiceGetAnswerProcedure,
			connect.WithSchema(answerServiceMethods.ByName("GetAnswer")),
			connect.WithClientOptions(opts...),
		),
	}
}

// answerServiceClient implements AnswerServiceClient.
type answerServiceClient struct {
	listAnswers  *connect.Client[v1.ListAnswersRequest, v1.ListAnswersResponse]
	submitAnswer *connect.Client[v1.SubmitAnswerRequest, v1.SubmitAnswerResponse]
	getAnswer    *connect.Client[v1.GetAnswerRequest, v1.GetAnswerResponse]
}

// ListAnswers calls contestant.v1.AnswerService.ListAnswers.
func (c *answerServiceClient) ListAnswers(ctx context.Context, req *connect.Request[v1.ListAnswersRequest]) (*connect.Response[v1.ListAnswersResponse], error) {
	return c.listAnswers.CallUnary(ctx, req)
}

// SubmitAnswer calls contestant.v1.AnswerService.SubmitAnswer.
func (c *answerServiceClient) SubmitAnswer(ctx context.Context, req *connect.Request[v1.SubmitAnswerRequest]) (*connect.Response[v1.SubmitAnswerResponse], error) {
	return c.submitAnswer.CallUnary(ctx, req)
}

// GetAnswer calls contestant.v1.AnswerService.GetAnswer.
func (c *answerServiceClient) GetAnswer(ctx context.Context, req *connect.Request[v1.GetAnswerRequest]) (*connect.Response[v1.GetAnswerResponse], error) {
	return c.getAnswer.CallUnary(ctx, req)
}

// AnswerServiceHandler is an implementation of the contestant.v1.AnswerService service.
type AnswerServiceHandler interface {
	ListAnswers(context.Context, *connect.Request[v1.ListAnswersRequest]) (*connect.Response[v1.ListAnswersResponse], error)
	SubmitAnswer(context.Context, *connect.Request[v1.SubmitAnswerRequest]) (*connect.Response[v1.SubmitAnswerResponse], error)
	GetAnswer(context.Context, *connect.Request[v1.GetAnswerRequest]) (*connect.Response[v1.GetAnswerResponse], error)
}

// NewAnswerServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewAnswerServiceHandler(svc AnswerServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	answerServiceMethods := v1.File_contestant_v1_answer_proto.Services().ByName("AnswerService").Methods()
	answerServiceListAnswersHandler := connect.NewUnaryHandler(
		AnswerServiceListAnswersProcedure,
		svc.ListAnswers,
		connect.WithSchema(answerServiceMethods.ByName("ListAnswers")),
		connect.WithHandlerOptions(opts...),
	)
	answerServiceSubmitAnswerHandler := connect.NewUnaryHandler(
		AnswerServiceSubmitAnswerProcedure,
		svc.SubmitAnswer,
		connect.WithSchema(answerServiceMethods.ByName("SubmitAnswer")),
		connect.WithHandlerOptions(opts...),
	)
	answerServiceGetAnswerHandler := connect.NewUnaryHandler(
		AnswerServiceGetAnswerProcedure,
		svc.GetAnswer,
		connect.WithSchema(answerServiceMethods.ByName("GetAnswer")),
		connect.WithHandlerOptions(opts...),
	)
	return "/contestant.v1.AnswerService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case AnswerServiceListAnswersProcedure:
			answerServiceListAnswersHandler.ServeHTTP(w, r)
		case AnswerServiceSubmitAnswerProcedure:
			answerServiceSubmitAnswerHandler.ServeHTTP(w, r)
		case AnswerServiceGetAnswerProcedure:
			answerServiceGetAnswerHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedAnswerServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedAnswerServiceHandler struct{}

func (UnimplementedAnswerServiceHandler) ListAnswers(context.Context, *connect.Request[v1.ListAnswersRequest]) (*connect.Response[v1.ListAnswersResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("contestant.v1.AnswerService.ListAnswers is not implemented"))
}

func (UnimplementedAnswerServiceHandler) SubmitAnswer(context.Context, *connect.Request[v1.SubmitAnswerRequest]) (*connect.Response[v1.SubmitAnswerResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("contestant.v1.AnswerService.SubmitAnswer is not implemented"))
}

func (UnimplementedAnswerServiceHandler) GetAnswer(context.Context, *connect.Request[v1.GetAnswerRequest]) (*connect.Response[v1.GetAnswerResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("contestant.v1.AnswerService.GetAnswer is not implemented"))
}
