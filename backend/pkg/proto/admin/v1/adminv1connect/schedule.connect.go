// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: admin/v1/schedule.proto

package adminv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/ictsc/ictsc-regalia/backend/pkg/proto/admin/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// ScheduleServiceName is the fully-qualified name of the ScheduleService service.
	ScheduleServiceName = "admin.v1.ScheduleService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// ScheduleServiceGetScheduleProcedure is the fully-qualified name of the ScheduleService's
	// GetSchedule RPC.
	ScheduleServiceGetScheduleProcedure = "/admin.v1.ScheduleService/GetSchedule"
	// ScheduleServiceUpdateScheduleProcedure is the fully-qualified name of the ScheduleService's
	// UpdateSchedule RPC.
	ScheduleServiceUpdateScheduleProcedure = "/admin.v1.ScheduleService/UpdateSchedule"
)

// ScheduleServiceClient is a client for the admin.v1.ScheduleService service.
type ScheduleServiceClient interface {
	GetSchedule(context.Context, *connect.Request[v1.GetScheduleRequest]) (*connect.Response[v1.GetScheduleResponse], error)
	UpdateSchedule(context.Context, *connect.Request[v1.UpdateScheduleRequest]) (*connect.Response[v1.UpdateScheduleResponse], error)
}

// NewScheduleServiceClient constructs a client for the admin.v1.ScheduleService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewScheduleServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) ScheduleServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	scheduleServiceMethods := v1.File_admin_v1_schedule_proto.Services().ByName("ScheduleService").Methods()
	return &scheduleServiceClient{
		getSchedule: connect.NewClient[v1.GetScheduleRequest, v1.GetScheduleResponse](
			httpClient,
			baseURL+ScheduleServiceGetScheduleProcedure,
			connect.WithSchema(scheduleServiceMethods.ByName("GetSchedule")),
			connect.WithClientOptions(opts...),
		),
		updateSchedule: connect.NewClient[v1.UpdateScheduleRequest, v1.UpdateScheduleResponse](
			httpClient,
			baseURL+ScheduleServiceUpdateScheduleProcedure,
			connect.WithSchema(scheduleServiceMethods.ByName("UpdateSchedule")),
			connect.WithClientOptions(opts...),
		),
	}
}

// scheduleServiceClient implements ScheduleServiceClient.
type scheduleServiceClient struct {
	getSchedule    *connect.Client[v1.GetScheduleRequest, v1.GetScheduleResponse]
	updateSchedule *connect.Client[v1.UpdateScheduleRequest, v1.UpdateScheduleResponse]
}

// GetSchedule calls admin.v1.ScheduleService.GetSchedule.
func (c *scheduleServiceClient) GetSchedule(ctx context.Context, req *connect.Request[v1.GetScheduleRequest]) (*connect.Response[v1.GetScheduleResponse], error) {
	return c.getSchedule.CallUnary(ctx, req)
}

// UpdateSchedule calls admin.v1.ScheduleService.UpdateSchedule.
func (c *scheduleServiceClient) UpdateSchedule(ctx context.Context, req *connect.Request[v1.UpdateScheduleRequest]) (*connect.Response[v1.UpdateScheduleResponse], error) {
	return c.updateSchedule.CallUnary(ctx, req)
}

// ScheduleServiceHandler is an implementation of the admin.v1.ScheduleService service.
type ScheduleServiceHandler interface {
	GetSchedule(context.Context, *connect.Request[v1.GetScheduleRequest]) (*connect.Response[v1.GetScheduleResponse], error)
	UpdateSchedule(context.Context, *connect.Request[v1.UpdateScheduleRequest]) (*connect.Response[v1.UpdateScheduleResponse], error)
}

// NewScheduleServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewScheduleServiceHandler(svc ScheduleServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	scheduleServiceMethods := v1.File_admin_v1_schedule_proto.Services().ByName("ScheduleService").Methods()
	scheduleServiceGetScheduleHandler := connect.NewUnaryHandler(
		ScheduleServiceGetScheduleProcedure,
		svc.GetSchedule,
		connect.WithSchema(scheduleServiceMethods.ByName("GetSchedule")),
		connect.WithHandlerOptions(opts...),
	)
	scheduleServiceUpdateScheduleHandler := connect.NewUnaryHandler(
		ScheduleServiceUpdateScheduleProcedure,
		svc.UpdateSchedule,
		connect.WithSchema(scheduleServiceMethods.ByName("UpdateSchedule")),
		connect.WithHandlerOptions(opts...),
	)
	return "/admin.v1.ScheduleService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case ScheduleServiceGetScheduleProcedure:
			scheduleServiceGetScheduleHandler.ServeHTTP(w, r)
		case ScheduleServiceUpdateScheduleProcedure:
			scheduleServiceUpdateScheduleHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedScheduleServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedScheduleServiceHandler struct{}

func (UnimplementedScheduleServiceHandler) GetSchedule(context.Context, *connect.Request[v1.GetScheduleRequest]) (*connect.Response[v1.GetScheduleResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("admin.v1.ScheduleService.GetSchedule is not implemented"))
}

func (UnimplementedScheduleServiceHandler) UpdateSchedule(context.Context, *connect.Request[v1.UpdateScheduleRequest]) (*connect.Response[v1.UpdateScheduleResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("admin.v1.ScheduleService.UpdateSchedule is not implemented"))
}
