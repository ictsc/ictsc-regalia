// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: admin/v1/team.proto

package adminv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/ictsc/ictsc-regalia/backend/pkg/proto/admin/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// TeamServiceName is the fully-qualified name of the TeamService service.
	TeamServiceName = "admin.v1.TeamService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// TeamServiceListTeamsProcedure is the fully-qualified name of the TeamService's ListTeams RPC.
	TeamServiceListTeamsProcedure = "/admin.v1.TeamService/ListTeams"
	// TeamServiceGetTeamProcedure is the fully-qualified name of the TeamService's GetTeam RPC.
	TeamServiceGetTeamProcedure = "/admin.v1.TeamService/GetTeam"
	// TeamServiceCreateTeamProcedure is the fully-qualified name of the TeamService's CreateTeam RPC.
	TeamServiceCreateTeamProcedure = "/admin.v1.TeamService/CreateTeam"
	// TeamServiceUpdateTeamProcedure is the fully-qualified name of the TeamService's UpdateTeam RPC.
	TeamServiceUpdateTeamProcedure = "/admin.v1.TeamService/UpdateTeam"
	// TeamServiceDeleteTeamProcedure is the fully-qualified name of the TeamService's DeleteTeam RPC.
	TeamServiceDeleteTeamProcedure = "/admin.v1.TeamService/DeleteTeam"
)

// TeamServiceClient is a client for the admin.v1.TeamService service.
type TeamServiceClient interface {
	ListTeams(context.Context, *connect.Request[v1.ListTeamsRequest]) (*connect.Response[v1.ListTeamsResponse], error)
	GetTeam(context.Context, *connect.Request[v1.GetTeamRequest]) (*connect.Response[v1.GetTeamResponse], error)
	CreateTeam(context.Context, *connect.Request[v1.CreateTeamRequest]) (*connect.Response[v1.CreateTeamResponse], error)
	UpdateTeam(context.Context, *connect.Request[v1.UpdateTeamRequest]) (*connect.Response[v1.UpdateTeamResponse], error)
	DeleteTeam(context.Context, *connect.Request[v1.DeleteTeamRequest]) (*connect.Response[v1.DeleteTeamResponse], error)
}

// NewTeamServiceClient constructs a client for the admin.v1.TeamService service. By default, it
// uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewTeamServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) TeamServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	teamServiceMethods := v1.File_admin_v1_team_proto.Services().ByName("TeamService").Methods()
	return &teamServiceClient{
		listTeams: connect.NewClient[v1.ListTeamsRequest, v1.ListTeamsResponse](
			httpClient,
			baseURL+TeamServiceListTeamsProcedure,
			connect.WithSchema(teamServiceMethods.ByName("ListTeams")),
			connect.WithClientOptions(opts...),
		),
		getTeam: connect.NewClient[v1.GetTeamRequest, v1.GetTeamResponse](
			httpClient,
			baseURL+TeamServiceGetTeamProcedure,
			connect.WithSchema(teamServiceMethods.ByName("GetTeam")),
			connect.WithClientOptions(opts...),
		),
		createTeam: connect.NewClient[v1.CreateTeamRequest, v1.CreateTeamResponse](
			httpClient,
			baseURL+TeamServiceCreateTeamProcedure,
			connect.WithSchema(teamServiceMethods.ByName("CreateTeam")),
			connect.WithClientOptions(opts...),
		),
		updateTeam: connect.NewClient[v1.UpdateTeamRequest, v1.UpdateTeamResponse](
			httpClient,
			baseURL+TeamServiceUpdateTeamProcedure,
			connect.WithSchema(teamServiceMethods.ByName("UpdateTeam")),
			connect.WithClientOptions(opts...),
		),
		deleteTeam: connect.NewClient[v1.DeleteTeamRequest, v1.DeleteTeamResponse](
			httpClient,
			baseURL+TeamServiceDeleteTeamProcedure,
			connect.WithSchema(teamServiceMethods.ByName("DeleteTeam")),
			connect.WithClientOptions(opts...),
		),
	}
}

// teamServiceClient implements TeamServiceClient.
type teamServiceClient struct {
	listTeams  *connect.Client[v1.ListTeamsRequest, v1.ListTeamsResponse]
	getTeam    *connect.Client[v1.GetTeamRequest, v1.GetTeamResponse]
	createTeam *connect.Client[v1.CreateTeamRequest, v1.CreateTeamResponse]
	updateTeam *connect.Client[v1.UpdateTeamRequest, v1.UpdateTeamResponse]
	deleteTeam *connect.Client[v1.DeleteTeamRequest, v1.DeleteTeamResponse]
}

// ListTeams calls admin.v1.TeamService.ListTeams.
func (c *teamServiceClient) ListTeams(ctx context.Context, req *connect.Request[v1.ListTeamsRequest]) (*connect.Response[v1.ListTeamsResponse], error) {
	return c.listTeams.CallUnary(ctx, req)
}

// GetTeam calls admin.v1.TeamService.GetTeam.
func (c *teamServiceClient) GetTeam(ctx context.Context, req *connect.Request[v1.GetTeamRequest]) (*connect.Response[v1.GetTeamResponse], error) {
	return c.getTeam.CallUnary(ctx, req)
}

// CreateTeam calls admin.v1.TeamService.CreateTeam.
func (c *teamServiceClient) CreateTeam(ctx context.Context, req *connect.Request[v1.CreateTeamRequest]) (*connect.Response[v1.CreateTeamResponse], error) {
	return c.createTeam.CallUnary(ctx, req)
}

// UpdateTeam calls admin.v1.TeamService.UpdateTeam.
func (c *teamServiceClient) UpdateTeam(ctx context.Context, req *connect.Request[v1.UpdateTeamRequest]) (*connect.Response[v1.UpdateTeamResponse], error) {
	return c.updateTeam.CallUnary(ctx, req)
}

// DeleteTeam calls admin.v1.TeamService.DeleteTeam.
func (c *teamServiceClient) DeleteTeam(ctx context.Context, req *connect.Request[v1.DeleteTeamRequest]) (*connect.Response[v1.DeleteTeamResponse], error) {
	return c.deleteTeam.CallUnary(ctx, req)
}

// TeamServiceHandler is an implementation of the admin.v1.TeamService service.
type TeamServiceHandler interface {
	ListTeams(context.Context, *connect.Request[v1.ListTeamsRequest]) (*connect.Response[v1.ListTeamsResponse], error)
	GetTeam(context.Context, *connect.Request[v1.GetTeamRequest]) (*connect.Response[v1.GetTeamResponse], error)
	CreateTeam(context.Context, *connect.Request[v1.CreateTeamRequest]) (*connect.Response[v1.CreateTeamResponse], error)
	UpdateTeam(context.Context, *connect.Request[v1.UpdateTeamRequest]) (*connect.Response[v1.UpdateTeamResponse], error)
	DeleteTeam(context.Context, *connect.Request[v1.DeleteTeamRequest]) (*connect.Response[v1.DeleteTeamResponse], error)
}

// NewTeamServiceHandler builds an HTTP handler from the service implementation. It returns the path
// on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewTeamServiceHandler(svc TeamServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	teamServiceMethods := v1.File_admin_v1_team_proto.Services().ByName("TeamService").Methods()
	teamServiceListTeamsHandler := connect.NewUnaryHandler(
		TeamServiceListTeamsProcedure,
		svc.ListTeams,
		connect.WithSchema(teamServiceMethods.ByName("ListTeams")),
		connect.WithHandlerOptions(opts...),
	)
	teamServiceGetTeamHandler := connect.NewUnaryHandler(
		TeamServiceGetTeamProcedure,
		svc.GetTeam,
		connect.WithSchema(teamServiceMethods.ByName("GetTeam")),
		connect.WithHandlerOptions(opts...),
	)
	teamServiceCreateTeamHandler := connect.NewUnaryHandler(
		TeamServiceCreateTeamProcedure,
		svc.CreateTeam,
		connect.WithSchema(teamServiceMethods.ByName("CreateTeam")),
		connect.WithHandlerOptions(opts...),
	)
	teamServiceUpdateTeamHandler := connect.NewUnaryHandler(
		TeamServiceUpdateTeamProcedure,
		svc.UpdateTeam,
		connect.WithSchema(teamServiceMethods.ByName("UpdateTeam")),
		connect.WithHandlerOptions(opts...),
	)
	teamServiceDeleteTeamHandler := connect.NewUnaryHandler(
		TeamServiceDeleteTeamProcedure,
		svc.DeleteTeam,
		connect.WithSchema(teamServiceMethods.ByName("DeleteTeam")),
		connect.WithHandlerOptions(opts...),
	)
	return "/admin.v1.TeamService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case TeamServiceListTeamsProcedure:
			teamServiceListTeamsHandler.ServeHTTP(w, r)
		case TeamServiceGetTeamProcedure:
			teamServiceGetTeamHandler.ServeHTTP(w, r)
		case TeamServiceCreateTeamProcedure:
			teamServiceCreateTeamHandler.ServeHTTP(w, r)
		case TeamServiceUpdateTeamProcedure:
			teamServiceUpdateTeamHandler.ServeHTTP(w, r)
		case TeamServiceDeleteTeamProcedure:
			teamServiceDeleteTeamHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedTeamServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedTeamServiceHandler struct{}

func (UnimplementedTeamServiceHandler) ListTeams(context.Context, *connect.Request[v1.ListTeamsRequest]) (*connect.Response[v1.ListTeamsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("admin.v1.TeamService.ListTeams is not implemented"))
}

func (UnimplementedTeamServiceHandler) GetTeam(context.Context, *connect.Request[v1.GetTeamRequest]) (*connect.Response[v1.GetTeamResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("admin.v1.TeamService.GetTeam is not implemented"))
}

func (UnimplementedTeamServiceHandler) CreateTeam(context.Context, *connect.Request[v1.CreateTeamRequest]) (*connect.Response[v1.CreateTeamResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("admin.v1.TeamService.CreateTeam is not implemented"))
}

func (UnimplementedTeamServiceHandler) UpdateTeam(context.Context, *connect.Request[v1.UpdateTeamRequest]) (*connect.Response[v1.UpdateTeamResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("admin.v1.TeamService.UpdateTeam is not implemented"))
}

func (UnimplementedTeamServiceHandler) DeleteTeam(context.Context, *connect.Request[v1.DeleteTeamRequest]) (*connect.Response[v1.DeleteTeamResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("admin.v1.TeamService.DeleteTeam is not implemented"))
}
