// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: admin/v1/discord.proto

package adminv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/ictsc/ictsc-regalia/backend/pkg/proto/admin/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// DiscordServiceName is the fully-qualified name of the DiscordService service.
	DiscordServiceName = "admin.v1.DiscordService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// DiscordServiceSyncTeamsProcedure is the fully-qualified name of the DiscordService's SyncTeams
	// RPC.
	DiscordServiceSyncTeamsProcedure = "/admin.v1.DiscordService/SyncTeams"
	// DiscordServiceSyncUsersProcedure is the fully-qualified name of the DiscordService's SyncUsers
	// RPC.
	DiscordServiceSyncUsersProcedure = "/admin.v1.DiscordService/SyncUsers"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	discordServiceServiceDescriptor         = v1.File_admin_v1_discord_proto.Services().ByName("DiscordService")
	discordServiceSyncTeamsMethodDescriptor = discordServiceServiceDescriptor.Methods().ByName("SyncTeams")
	discordServiceSyncUsersMethodDescriptor = discordServiceServiceDescriptor.Methods().ByName("SyncUsers")
)

// DiscordServiceClient is a client for the admin.v1.DiscordService service.
type DiscordServiceClient interface {
	SyncTeams(context.Context, *connect.Request[v1.SyncTeamsRequest]) (*connect.Response[v1.SyncTeamsResponse], error)
	SyncUsers(context.Context, *connect.Request[v1.SyncUsersRequest]) (*connect.Response[v1.SyncUsersResponse], error)
}

// NewDiscordServiceClient constructs a client for the admin.v1.DiscordService service. By default,
// it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and
// sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC()
// or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewDiscordServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) DiscordServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &discordServiceClient{
		syncTeams: connect.NewClient[v1.SyncTeamsRequest, v1.SyncTeamsResponse](
			httpClient,
			baseURL+DiscordServiceSyncTeamsProcedure,
			connect.WithSchema(discordServiceSyncTeamsMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		syncUsers: connect.NewClient[v1.SyncUsersRequest, v1.SyncUsersResponse](
			httpClient,
			baseURL+DiscordServiceSyncUsersProcedure,
			connect.WithSchema(discordServiceSyncUsersMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// discordServiceClient implements DiscordServiceClient.
type discordServiceClient struct {
	syncTeams *connect.Client[v1.SyncTeamsRequest, v1.SyncTeamsResponse]
	syncUsers *connect.Client[v1.SyncUsersRequest, v1.SyncUsersResponse]
}

// SyncTeams calls admin.v1.DiscordService.SyncTeams.
func (c *discordServiceClient) SyncTeams(ctx context.Context, req *connect.Request[v1.SyncTeamsRequest]) (*connect.Response[v1.SyncTeamsResponse], error) {
	return c.syncTeams.CallUnary(ctx, req)
}

// SyncUsers calls admin.v1.DiscordService.SyncUsers.
func (c *discordServiceClient) SyncUsers(ctx context.Context, req *connect.Request[v1.SyncUsersRequest]) (*connect.Response[v1.SyncUsersResponse], error) {
	return c.syncUsers.CallUnary(ctx, req)
}

// DiscordServiceHandler is an implementation of the admin.v1.DiscordService service.
type DiscordServiceHandler interface {
	SyncTeams(context.Context, *connect.Request[v1.SyncTeamsRequest]) (*connect.Response[v1.SyncTeamsResponse], error)
	SyncUsers(context.Context, *connect.Request[v1.SyncUsersRequest]) (*connect.Response[v1.SyncUsersResponse], error)
}

// NewDiscordServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewDiscordServiceHandler(svc DiscordServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	discordServiceSyncTeamsHandler := connect.NewUnaryHandler(
		DiscordServiceSyncTeamsProcedure,
		svc.SyncTeams,
		connect.WithSchema(discordServiceSyncTeamsMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	discordServiceSyncUsersHandler := connect.NewUnaryHandler(
		DiscordServiceSyncUsersProcedure,
		svc.SyncUsers,
		connect.WithSchema(discordServiceSyncUsersMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/admin.v1.DiscordService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case DiscordServiceSyncTeamsProcedure:
			discordServiceSyncTeamsHandler.ServeHTTP(w, r)
		case DiscordServiceSyncUsersProcedure:
			discordServiceSyncUsersHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedDiscordServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedDiscordServiceHandler struct{}

func (UnimplementedDiscordServiceHandler) SyncTeams(context.Context, *connect.Request[v1.SyncTeamsRequest]) (*connect.Response[v1.SyncTeamsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("admin.v1.DiscordService.SyncTeams is not implemented"))
}

func (UnimplementedDiscordServiceHandler) SyncUsers(context.Context, *connect.Request[v1.SyncUsersRequest]) (*connect.Response[v1.SyncUsersResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("admin.v1.DiscordService.SyncUsers is not implemented"))
}
