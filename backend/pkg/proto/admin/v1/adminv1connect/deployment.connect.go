// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: admin/v1/deployment.proto

package adminv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/ictsc/ictsc-regalia/backend/pkg/proto/admin/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// DeploymentServiceName is the fully-qualified name of the DeploymentService service.
	DeploymentServiceName = "admin.v1.DeploymentService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// DeploymentServiceListDeploymentsProcedure is the fully-qualified name of the DeploymentService's
	// ListDeployments RPC.
	DeploymentServiceListDeploymentsProcedure = "/admin.v1.DeploymentService/ListDeployments"
	// DeploymentServiceSyncDeploymentProcedure is the fully-qualified name of the DeploymentService's
	// SyncDeployment RPC.
	DeploymentServiceSyncDeploymentProcedure = "/admin.v1.DeploymentService/SyncDeployment"
	// DeploymentServiceDeployProcedure is the fully-qualified name of the DeploymentService's Deploy
	// RPC.
	DeploymentServiceDeployProcedure = "/admin.v1.DeploymentService/Deploy"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	deploymentServiceServiceDescriptor               = v1.File_admin_v1_deployment_proto.Services().ByName("DeploymentService")
	deploymentServiceListDeploymentsMethodDescriptor = deploymentServiceServiceDescriptor.Methods().ByName("ListDeployments")
	deploymentServiceSyncDeploymentMethodDescriptor  = deploymentServiceServiceDescriptor.Methods().ByName("SyncDeployment")
	deploymentServiceDeployMethodDescriptor          = deploymentServiceServiceDescriptor.Methods().ByName("Deploy")
)

// DeploymentServiceClient is a client for the admin.v1.DeploymentService service.
type DeploymentServiceClient interface {
	ListDeployments(context.Context, *connect.Request[v1.ListDeploymentsRequest]) (*connect.Response[v1.ListDeploymentsResponse], error)
	SyncDeployment(context.Context, *connect.Request[v1.SyncDeploymentRequest]) (*connect.Response[v1.SyncDeploymentResponse], error)
	Deploy(context.Context, *connect.Request[v1.DeployRequest]) (*connect.Response[v1.DeployResponse], error)
}

// NewDeploymentServiceClient constructs a client for the admin.v1.DeploymentService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewDeploymentServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) DeploymentServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &deploymentServiceClient{
		listDeployments: connect.NewClient[v1.ListDeploymentsRequest, v1.ListDeploymentsResponse](
			httpClient,
			baseURL+DeploymentServiceListDeploymentsProcedure,
			connect.WithSchema(deploymentServiceListDeploymentsMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		syncDeployment: connect.NewClient[v1.SyncDeploymentRequest, v1.SyncDeploymentResponse](
			httpClient,
			baseURL+DeploymentServiceSyncDeploymentProcedure,
			connect.WithSchema(deploymentServiceSyncDeploymentMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		deploy: connect.NewClient[v1.DeployRequest, v1.DeployResponse](
			httpClient,
			baseURL+DeploymentServiceDeployProcedure,
			connect.WithSchema(deploymentServiceDeployMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// deploymentServiceClient implements DeploymentServiceClient.
type deploymentServiceClient struct {
	listDeployments *connect.Client[v1.ListDeploymentsRequest, v1.ListDeploymentsResponse]
	syncDeployment  *connect.Client[v1.SyncDeploymentRequest, v1.SyncDeploymentResponse]
	deploy          *connect.Client[v1.DeployRequest, v1.DeployResponse]
}

// ListDeployments calls admin.v1.DeploymentService.ListDeployments.
func (c *deploymentServiceClient) ListDeployments(ctx context.Context, req *connect.Request[v1.ListDeploymentsRequest]) (*connect.Response[v1.ListDeploymentsResponse], error) {
	return c.listDeployments.CallUnary(ctx, req)
}

// SyncDeployment calls admin.v1.DeploymentService.SyncDeployment.
func (c *deploymentServiceClient) SyncDeployment(ctx context.Context, req *connect.Request[v1.SyncDeploymentRequest]) (*connect.Response[v1.SyncDeploymentResponse], error) {
	return c.syncDeployment.CallUnary(ctx, req)
}

// Deploy calls admin.v1.DeploymentService.Deploy.
func (c *deploymentServiceClient) Deploy(ctx context.Context, req *connect.Request[v1.DeployRequest]) (*connect.Response[v1.DeployResponse], error) {
	return c.deploy.CallUnary(ctx, req)
}

// DeploymentServiceHandler is an implementation of the admin.v1.DeploymentService service.
type DeploymentServiceHandler interface {
	ListDeployments(context.Context, *connect.Request[v1.ListDeploymentsRequest]) (*connect.Response[v1.ListDeploymentsResponse], error)
	SyncDeployment(context.Context, *connect.Request[v1.SyncDeploymentRequest]) (*connect.Response[v1.SyncDeploymentResponse], error)
	Deploy(context.Context, *connect.Request[v1.DeployRequest]) (*connect.Response[v1.DeployResponse], error)
}

// NewDeploymentServiceHandler builds an HTTP handler from the service implementation. It returns
// the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewDeploymentServiceHandler(svc DeploymentServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	deploymentServiceListDeploymentsHandler := connect.NewUnaryHandler(
		DeploymentServiceListDeploymentsProcedure,
		svc.ListDeployments,
		connect.WithSchema(deploymentServiceListDeploymentsMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	deploymentServiceSyncDeploymentHandler := connect.NewUnaryHandler(
		DeploymentServiceSyncDeploymentProcedure,
		svc.SyncDeployment,
		connect.WithSchema(deploymentServiceSyncDeploymentMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	deploymentServiceDeployHandler := connect.NewUnaryHandler(
		DeploymentServiceDeployProcedure,
		svc.Deploy,
		connect.WithSchema(deploymentServiceDeployMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/admin.v1.DeploymentService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case DeploymentServiceListDeploymentsProcedure:
			deploymentServiceListDeploymentsHandler.ServeHTTP(w, r)
		case DeploymentServiceSyncDeploymentProcedure:
			deploymentServiceSyncDeploymentHandler.ServeHTTP(w, r)
		case DeploymentServiceDeployProcedure:
			deploymentServiceDeployHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedDeploymentServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedDeploymentServiceHandler struct{}

func (UnimplementedDeploymentServiceHandler) ListDeployments(context.Context, *connect.Request[v1.ListDeploymentsRequest]) (*connect.Response[v1.ListDeploymentsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("admin.v1.DeploymentService.ListDeployments is not implemented"))
}

func (UnimplementedDeploymentServiceHandler) SyncDeployment(context.Context, *connect.Request[v1.SyncDeploymentRequest]) (*connect.Response[v1.SyncDeploymentResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("admin.v1.DeploymentService.SyncDeployment is not implemented"))
}

func (UnimplementedDeploymentServiceHandler) Deploy(context.Context, *connect.Request[v1.DeployRequest]) (*connect.Response[v1.DeployResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("admin.v1.DeploymentService.Deploy is not implemented"))
}
