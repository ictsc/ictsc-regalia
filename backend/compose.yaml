services:
  postgres:
    image: postgres:17
    restart: always
    ports:
      - 127.0.0.1::5432
    volumes:
      - db:/var/lib/postgresql/data
      - ./schema.sql:/docker-entrypoint-initdb.d/1-schema.sql
      - ./seed.sql:/docker-entrypoint-initdb.d/2-seed.sql
    environment:
      POSTGRES_PASSWORD: password
      POSTGRES_USER: ictsc
      POSTGRES_DB: ictscore

  redis:
    image: redis:7
    restart: always
    ports:
      - 127.0.0.1::6379

  otelcol:
    image: otel/opentelemetry-collector
    restart: always
    ports:
      - 127.0.0.1::4317  # OTLP gRPC
    configs:
      - source: otelcol_config
        target: /etc/otelcol/config.yaml

  jaeger:
    image: jaegertracing/all-in-one
    restart: always
    ports:
      - 127.0.0.1:16686:16686

  prometheus:
    image: prom/prometheus
    restart: always
    ports:
      - 127.0.0.1:9090:9090
    command:
      - --config.file=/etc/prometheus/prometheus.yml
      - --storage.tsdb.path=/prometheus
      - --web.console.libraries=/usr/share/prometheus/console_libraries
      - --web.console.templates=/usr/share/prometheus/consoles
      - --web.enable-otlp-receiver

configs:
  otelcol_config:
    content: |
      receivers:
        otlp:
          protocols:
            grpc:
              endpoint: 0.0.0.0:4317

      processors:
        batch:

      exporters:
        otlp/jaeger:
          endpoint: jaeger:4317
          tls:
            insecure: true
        otlphttp/prometheus:
          metrics_endpoint: http://prometheus:9090/api/v1/otlp/v1/metrics

      service:
        pipelines:
          metrics:
            receivers: [otlp]
            processors: [batch]
            exporters: [otlphttp/prometheus]
          traces:
            receivers: [otlp]
            processors: [batch]
            exporters: [otlp/jaeger]

volumes:
  db:
