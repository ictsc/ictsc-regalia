// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: contestant/v1/contestant.proto

package v1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/ictsc/ictsc-outlands/backend/internal/proto/contestant/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// ContestantServiceName is the fully-qualified name of the ContestantService service.
	ContestantServiceName = "contestant.v1.ContestantService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// ContestantServiceGetMeProcedure is the fully-qualified name of the ContestantService's GetMe RPC.
	ContestantServiceGetMeProcedure = "/contestant.v1.ContestantService/GetMe"
	// ContestantServiceGetContestantProcedure is the fully-qualified name of the ContestantService's
	// GetContestant RPC.
	ContestantServiceGetContestantProcedure = "/contestant.v1.ContestantService/GetContestant"
	// ContestantServicePostContestantProcedure is the fully-qualified name of the ContestantService's
	// PostContestant RPC.
	ContestantServicePostContestantProcedure = "/contestant.v1.ContestantService/PostContestant"
	// ContestantServicePatchMeProcedure is the fully-qualified name of the ContestantService's PatchMe
	// RPC.
	ContestantServicePatchMeProcedure = "/contestant.v1.ContestantService/PatchMe"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	contestantServiceServiceDescriptor              = v1.File_contestant_v1_contestant_proto.Services().ByName("ContestantService")
	contestantServiceGetMeMethodDescriptor          = contestantServiceServiceDescriptor.Methods().ByName("GetMe")
	contestantServiceGetContestantMethodDescriptor  = contestantServiceServiceDescriptor.Methods().ByName("GetContestant")
	contestantServicePostContestantMethodDescriptor = contestantServiceServiceDescriptor.Methods().ByName("PostContestant")
	contestantServicePatchMeMethodDescriptor        = contestantServiceServiceDescriptor.Methods().ByName("PatchMe")
)

// ContestantServiceClient is a client for the contestant.v1.ContestantService service.
type ContestantServiceClient interface {
	GetMe(context.Context, *connect.Request[v1.GetMeRequest]) (*connect.Response[v1.GetMeResponse], error)
	GetContestant(context.Context, *connect.Request[v1.GetContestantRequest]) (*connect.Response[v1.GetContestantResponse], error)
	PostContestant(context.Context, *connect.Request[v1.PostContestantRequest]) (*connect.Response[v1.PostContestantResponse], error)
	PatchMe(context.Context, *connect.Request[v1.PatchMeRequest]) (*connect.Response[v1.PatchMeResponse], error)
}

// NewContestantServiceClient constructs a client for the contestant.v1.ContestantService service.
// By default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped
// responses, and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewContestantServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) ContestantServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &contestantServiceClient{
		getMe: connect.NewClient[v1.GetMeRequest, v1.GetMeResponse](
			httpClient,
			baseURL+ContestantServiceGetMeProcedure,
			connect.WithSchema(contestantServiceGetMeMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getContestant: connect.NewClient[v1.GetContestantRequest, v1.GetContestantResponse](
			httpClient,
			baseURL+ContestantServiceGetContestantProcedure,
			connect.WithSchema(contestantServiceGetContestantMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		postContestant: connect.NewClient[v1.PostContestantRequest, v1.PostContestantResponse](
			httpClient,
			baseURL+ContestantServicePostContestantProcedure,
			connect.WithSchema(contestantServicePostContestantMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		patchMe: connect.NewClient[v1.PatchMeRequest, v1.PatchMeResponse](
			httpClient,
			baseURL+ContestantServicePatchMeProcedure,
			connect.WithSchema(contestantServicePatchMeMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// contestantServiceClient implements ContestantServiceClient.
type contestantServiceClient struct {
	getMe          *connect.Client[v1.GetMeRequest, v1.GetMeResponse]
	getContestant  *connect.Client[v1.GetContestantRequest, v1.GetContestantResponse]
	postContestant *connect.Client[v1.PostContestantRequest, v1.PostContestantResponse]
	patchMe        *connect.Client[v1.PatchMeRequest, v1.PatchMeResponse]
}

// GetMe calls contestant.v1.ContestantService.GetMe.
func (c *contestantServiceClient) GetMe(ctx context.Context, req *connect.Request[v1.GetMeRequest]) (*connect.Response[v1.GetMeResponse], error) {
	return c.getMe.CallUnary(ctx, req)
}

// GetContestant calls contestant.v1.ContestantService.GetContestant.
func (c *contestantServiceClient) GetContestant(ctx context.Context, req *connect.Request[v1.GetContestantRequest]) (*connect.Response[v1.GetContestantResponse], error) {
	return c.getContestant.CallUnary(ctx, req)
}

// PostContestant calls contestant.v1.ContestantService.PostContestant.
func (c *contestantServiceClient) PostContestant(ctx context.Context, req *connect.Request[v1.PostContestantRequest]) (*connect.Response[v1.PostContestantResponse], error) {
	return c.postContestant.CallUnary(ctx, req)
}

// PatchMe calls contestant.v1.ContestantService.PatchMe.
func (c *contestantServiceClient) PatchMe(ctx context.Context, req *connect.Request[v1.PatchMeRequest]) (*connect.Response[v1.PatchMeResponse], error) {
	return c.patchMe.CallUnary(ctx, req)
}

// ContestantServiceHandler is an implementation of the contestant.v1.ContestantService service.
type ContestantServiceHandler interface {
	GetMe(context.Context, *connect.Request[v1.GetMeRequest]) (*connect.Response[v1.GetMeResponse], error)
	GetContestant(context.Context, *connect.Request[v1.GetContestantRequest]) (*connect.Response[v1.GetContestantResponse], error)
	PostContestant(context.Context, *connect.Request[v1.PostContestantRequest]) (*connect.Response[v1.PostContestantResponse], error)
	PatchMe(context.Context, *connect.Request[v1.PatchMeRequest]) (*connect.Response[v1.PatchMeResponse], error)
}

// NewContestantServiceHandler builds an HTTP handler from the service implementation. It returns
// the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewContestantServiceHandler(svc ContestantServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	contestantServiceGetMeHandler := connect.NewUnaryHandler(
		ContestantServiceGetMeProcedure,
		svc.GetMe,
		connect.WithSchema(contestantServiceGetMeMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	contestantServiceGetContestantHandler := connect.NewUnaryHandler(
		ContestantServiceGetContestantProcedure,
		svc.GetContestant,
		connect.WithSchema(contestantServiceGetContestantMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	contestantServicePostContestantHandler := connect.NewUnaryHandler(
		ContestantServicePostContestantProcedure,
		svc.PostContestant,
		connect.WithSchema(contestantServicePostContestantMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	contestantServicePatchMeHandler := connect.NewUnaryHandler(
		ContestantServicePatchMeProcedure,
		svc.PatchMe,
		connect.WithSchema(contestantServicePatchMeMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/contestant.v1.ContestantService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case ContestantServiceGetMeProcedure:
			contestantServiceGetMeHandler.ServeHTTP(w, r)
		case ContestantServiceGetContestantProcedure:
			contestantServiceGetContestantHandler.ServeHTTP(w, r)
		case ContestantServicePostContestantProcedure:
			contestantServicePostContestantHandler.ServeHTTP(w, r)
		case ContestantServicePatchMeProcedure:
			contestantServicePatchMeHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedContestantServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedContestantServiceHandler struct{}

func (UnimplementedContestantServiceHandler) GetMe(context.Context, *connect.Request[v1.GetMeRequest]) (*connect.Response[v1.GetMeResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("contestant.v1.ContestantService.GetMe is not implemented"))
}

func (UnimplementedContestantServiceHandler) GetContestant(context.Context, *connect.Request[v1.GetContestantRequest]) (*connect.Response[v1.GetContestantResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("contestant.v1.ContestantService.GetContestant is not implemented"))
}

func (UnimplementedContestantServiceHandler) PostContestant(context.Context, *connect.Request[v1.PostContestantRequest]) (*connect.Response[v1.PostContestantResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("contestant.v1.ContestantService.PostContestant is not implemented"))
}

func (UnimplementedContestantServiceHandler) PatchMe(context.Context, *connect.Request[v1.PatchMeRequest]) (*connect.Response[v1.PatchMeResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("contestant.v1.ContestantService.PatchMe is not implemented"))
}
