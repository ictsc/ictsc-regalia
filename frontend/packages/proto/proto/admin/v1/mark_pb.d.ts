// @generated by protoc-gen-es v2.8.0 with parameter "target=js+dts"
// @generated from file admin/v1/mark.proto (package admin.v1, syntax proto3)
/* eslint-disable */

import type { GenEnum, GenFile, GenMessage, GenService } from "@bufbuild/protobuf/codegenv2";
import type { Message } from "@bufbuild/protobuf";
import type { Team } from "./team_pb";
import type { Contestant } from "./contestant_pb";
import type { Problem, ProblemType } from "./problem_pb";
import type { Timestamp } from "@bufbuild/protobuf/wkt";
import type { Admin } from "./actor_pb";

/**
 * Describes the file admin/v1/mark.proto.
 */
export declare const file_admin_v1_mark: GenFile;

/**
 * 解答
 *
 * @generated from message admin.v1.Answer
 */
export declare type Answer = Message<"admin.v1.Answer"> & {
  /**
   * @generated from field: uint32 id = 1;
   */
  id: number;

  /**
   * @generated from field: admin.v1.Team team = 2;
   */
  team?: Team;

  /**
   * @generated from field: admin.v1.Contestant author = 3;
   */
  author?: Contestant;

  /**
   * @generated from field: admin.v1.Problem problem = 4;
   */
  problem?: Problem;

  /**
   * @generated from field: admin.v1.AnswerBody body = 5;
   */
  body?: AnswerBody;

  /**
   * @generated from field: google.protobuf.Timestamp created_at = 6;
   */
  createdAt?: Timestamp;

  /**
   * @generated from field: optional admin.v1.MarkingScore score = 7;
   */
  score?: MarkingScore;
};

/**
 * Describes the message admin.v1.Answer.
 * Use `create(AnswerSchema)` to create a new message.
 */
export declare const AnswerSchema: GenMessage<Answer>;

/**
 * @generated from message admin.v1.AnswerBody
 */
export declare type AnswerBody = Message<"admin.v1.AnswerBody"> & {
  /**
   * @generated from field: admin.v1.ProblemType type = 1;
   */
  type: ProblemType;

  /**
   * @generated from oneof admin.v1.AnswerBody.body
   */
  body: {
    /**
     * @generated from field: admin.v1.DescriptiveAnswer descriptive = 2;
     */
    value: DescriptiveAnswer;
    case: "descriptive";
  } | { case: undefined; value?: undefined };
};

/**
 * Describes the message admin.v1.AnswerBody.
 * Use `create(AnswerBodySchema)` to create a new message.
 */
export declare const AnswerBodySchema: GenMessage<AnswerBody>;

/**
 * @generated from message admin.v1.DescriptiveAnswer
 */
export declare type DescriptiveAnswer = Message<"admin.v1.DescriptiveAnswer"> & {
  /**
   * @generated from field: string body = 1;
   */
  body: string;
};

/**
 * Describes the message admin.v1.DescriptiveAnswer.
 * Use `create(DescriptiveAnswerSchema)` to create a new message.
 */
export declare const DescriptiveAnswerSchema: GenMessage<DescriptiveAnswer>;

/**
 * 採点結果
 *
 * @generated from message admin.v1.MarkingResult
 */
export declare type MarkingResult = Message<"admin.v1.MarkingResult"> & {
  /**
   * @generated from field: admin.v1.Answer answer = 1;
   */
  answer?: Answer;

  /**
   * @generated from field: admin.v1.Admin judge = 2;
   */
  judge?: Admin;

  /**
   * @generated from field: uint32 score = 3;
   */
  score: number;

  /**
   * @generated from field: admin.v1.MarkingRationale rationale = 4;
   */
  rationale?: MarkingRationale;

  /**
   * @generated from field: google.protobuf.Timestamp created_at = 5;
   */
  createdAt?: Timestamp;

  /**
   * @generated from field: admin.v1.MarkingResultVisibility visibility = 7;
   */
  visibility: MarkingResultVisibility;
};

/**
 * Describes the message admin.v1.MarkingResult.
 * Use `create(MarkingResultSchema)` to create a new message.
 */
export declare const MarkingResultSchema: GenMessage<MarkingResult>;

/**
 * @generated from message admin.v1.MarkingScore
 */
export declare type MarkingScore = Message<"admin.v1.MarkingScore"> & {
  /**
   * @generated from field: uint32 total = 1;
   */
  total: number;

  /**
   * @generated from field: uint32 marked = 2;
   */
  marked: number;

  /**
   * @generated from field: uint32 penalty = 3;
   */
  penalty: number;

  /**
   * @generated from field: uint32 max = 4;
   */
  max: number;
};

/**
 * Describes the message admin.v1.MarkingScore.
 * Use `create(MarkingScoreSchema)` to create a new message.
 */
export declare const MarkingScoreSchema: GenMessage<MarkingScore>;

/**
 * @generated from message admin.v1.MarkingRationale
 */
export declare type MarkingRationale = Message<"admin.v1.MarkingRationale"> & {
  /**
   * @generated from field: admin.v1.ProblemType type = 1;
   */
  type: ProblemType;

  /**
   * @generated from oneof admin.v1.MarkingRationale.body
   */
  body: {
    /**
     * @generated from field: admin.v1.DescriptiveMarkingRationale descriptive = 2;
     */
    value: DescriptiveMarkingRationale;
    case: "descriptive";
  } | { case: undefined; value?: undefined };
};

/**
 * Describes the message admin.v1.MarkingRationale.
 * Use `create(MarkingRationaleSchema)` to create a new message.
 */
export declare const MarkingRationaleSchema: GenMessage<MarkingRationale>;

/**
 * @generated from message admin.v1.DescriptiveMarkingRationale
 */
export declare type DescriptiveMarkingRationale = Message<"admin.v1.DescriptiveMarkingRationale"> & {
  /**
   * @generated from field: string comment = 1;
   */
  comment: string;
};

/**
 * Describes the message admin.v1.DescriptiveMarkingRationale.
 * Use `create(DescriptiveMarkingRationaleSchema)` to create a new message.
 */
export declare const DescriptiveMarkingRationaleSchema: GenMessage<DescriptiveMarkingRationale>;

/**
 * @generated from message admin.v1.ListAnswersRequest
 */
export declare type ListAnswersRequest = Message<"admin.v1.ListAnswersRequest"> & {
  /**
   * 採点が完了した提出を含めるかどうか
   *
   * @generated from field: bool include_marked = 1;
   */
  includeMarked: boolean;
};

/**
 * Describes the message admin.v1.ListAnswersRequest.
 * Use `create(ListAnswersRequestSchema)` to create a new message.
 */
export declare const ListAnswersRequestSchema: GenMessage<ListAnswersRequest>;

/**
 * @generated from message admin.v1.ListAnswersResponse
 */
export declare type ListAnswersResponse = Message<"admin.v1.ListAnswersResponse"> & {
  /**
   * @generated from field: repeated admin.v1.Answer answers = 1;
   */
  answers: Answer[];
};

/**
 * Describes the message admin.v1.ListAnswersResponse.
 * Use `create(ListAnswersResponseSchema)` to create a new message.
 */
export declare const ListAnswersResponseSchema: GenMessage<ListAnswersResponse>;

/**
 * @generated from message admin.v1.GetAnswerRequest
 */
export declare type GetAnswerRequest = Message<"admin.v1.GetAnswerRequest"> & {
  /**
   * @generated from field: uint32 team_code = 1;
   */
  teamCode: number;

  /**
   * @generated from field: string problem_code = 2;
   */
  problemCode: string;

  /**
   * @generated from field: uint32 id = 3;
   */
  id: number;
};

/**
 * Describes the message admin.v1.GetAnswerRequest.
 * Use `create(GetAnswerRequestSchema)` to create a new message.
 */
export declare const GetAnswerRequestSchema: GenMessage<GetAnswerRequest>;

/**
 * @generated from message admin.v1.GetAnswerResponse
 */
export declare type GetAnswerResponse = Message<"admin.v1.GetAnswerResponse"> & {
  /**
   * @generated from field: admin.v1.Answer answer = 1;
   */
  answer?: Answer;
};

/**
 * Describes the message admin.v1.GetAnswerResponse.
 * Use `create(GetAnswerResponseSchema)` to create a new message.
 */
export declare const GetAnswerResponseSchema: GenMessage<GetAnswerResponse>;

/**
 * @generated from message admin.v1.ListMarkingResultsRequest
 */
export declare type ListMarkingResultsRequest = Message<"admin.v1.ListMarkingResultsRequest"> & {
  /**
   * @generated from field: admin.v1.MarkingResultVisibility visibility = 1;
   */
  visibility: MarkingResultVisibility;
};

/**
 * Describes the message admin.v1.ListMarkingResultsRequest.
 * Use `create(ListMarkingResultsRequestSchema)` to create a new message.
 */
export declare const ListMarkingResultsRequestSchema: GenMessage<ListMarkingResultsRequest>;

/**
 * @generated from message admin.v1.ListMarkingResultsResponse
 */
export declare type ListMarkingResultsResponse = Message<"admin.v1.ListMarkingResultsResponse"> & {
  /**
   * @generated from field: repeated admin.v1.MarkingResult marking_results = 1;
   */
  markingResults: MarkingResult[];
};

/**
 * Describes the message admin.v1.ListMarkingResultsResponse.
 * Use `create(ListMarkingResultsResponseSchema)` to create a new message.
 */
export declare const ListMarkingResultsResponseSchema: GenMessage<ListMarkingResultsResponse>;

/**
 * @generated from message admin.v1.CreateMarkingResultRequest
 */
export declare type CreateMarkingResultRequest = Message<"admin.v1.CreateMarkingResultRequest"> & {
  /**
   * @generated from field: admin.v1.MarkingResult marking_result = 1;
   */
  markingResult?: MarkingResult;
};

/**
 * Describes the message admin.v1.CreateMarkingResultRequest.
 * Use `create(CreateMarkingResultRequestSchema)` to create a new message.
 */
export declare const CreateMarkingResultRequestSchema: GenMessage<CreateMarkingResultRequest>;

/**
 * @generated from message admin.v1.CreateMarkingResultResponse
 */
export declare type CreateMarkingResultResponse = Message<"admin.v1.CreateMarkingResultResponse"> & {
  /**
   * @generated from field: admin.v1.MarkingResult marking_result = 1;
   */
  markingResult?: MarkingResult;
};

/**
 * Describes the message admin.v1.CreateMarkingResultResponse.
 * Use `create(CreateMarkingResultResponseSchema)` to create a new message.
 */
export declare const CreateMarkingResultResponseSchema: GenMessage<CreateMarkingResultResponse>;

/**
 * ビジネスロジックに沿って、採点結果の可視性を更新する
 *
 * @generated from message admin.v1.UpdateMarkingResultVisibilitiesRequest
 */
export declare type UpdateMarkingResultVisibilitiesRequest = Message<"admin.v1.UpdateMarkingResultVisibilitiesRequest"> & {
};

/**
 * Describes the message admin.v1.UpdateMarkingResultVisibilitiesRequest.
 * Use `create(UpdateMarkingResultVisibilitiesRequestSchema)` to create a new message.
 */
export declare const UpdateMarkingResultVisibilitiesRequestSchema: GenMessage<UpdateMarkingResultVisibilitiesRequest>;

/**
 * @generated from message admin.v1.UpdateMarkingResultVisibilitiesResponse
 */
export declare type UpdateMarkingResultVisibilitiesResponse = Message<"admin.v1.UpdateMarkingResultVisibilitiesResponse"> & {
};

/**
 * Describes the message admin.v1.UpdateMarkingResultVisibilitiesResponse.
 * Use `create(UpdateMarkingResultVisibilitiesResponseSchema)` to create a new message.
 */
export declare const UpdateMarkingResultVisibilitiesResponseSchema: GenMessage<UpdateMarkingResultVisibilitiesResponse>;

/**
 * @generated from message admin.v1.UpdateScoresRequest
 */
export declare type UpdateScoresRequest = Message<"admin.v1.UpdateScoresRequest"> & {
};

/**
 * Describes the message admin.v1.UpdateScoresRequest.
 * Use `create(UpdateScoresRequestSchema)` to create a new message.
 */
export declare const UpdateScoresRequestSchema: GenMessage<UpdateScoresRequest>;

/**
 * @generated from message admin.v1.UpdateScoresResponse
 */
export declare type UpdateScoresResponse = Message<"admin.v1.UpdateScoresResponse"> & {
};

/**
 * Describes the message admin.v1.UpdateScoresResponse.
 * Use `create(UpdateScoresResponseSchema)` to create a new message.
 */
export declare const UpdateScoresResponseSchema: GenMessage<UpdateScoresResponse>;

/**
 * @generated from enum admin.v1.MarkingResultVisibility
 */
export enum MarkingResultVisibility {
  /**
   * @generated from enum value: MARKING_RESULT_VISIBILITY_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * 参加者に見える
   *
   * @generated from enum value: MARKING_RESULT_VISIBILITY_PUBLIC = 1;
   */
  PUBLIC = 1,

  /**
   * 参加者に見えない
   *
   * @generated from enum value: MARKING_RESULT_VISIBILITY_PRIVATE = 2;
   */
  PRIVATE = 2,
}

/**
 * Describes the enum admin.v1.MarkingResultVisibility.
 */
export declare const MarkingResultVisibilitySchema: GenEnum<MarkingResultVisibility>;

/**
 * @generated from service admin.v1.MarkService
 */
export declare const MarkService: GenService<{
  /**
   * @generated from rpc admin.v1.MarkService.ListAnswers
   */
  listAnswers: {
    methodKind: "unary";
    input: typeof ListAnswersRequestSchema;
    output: typeof ListAnswersResponseSchema;
  },
  /**
   * @generated from rpc admin.v1.MarkService.GetAnswer
   */
  getAnswer: {
    methodKind: "unary";
    input: typeof GetAnswerRequestSchema;
    output: typeof GetAnswerResponseSchema;
  },
  /**
   * @generated from rpc admin.v1.MarkService.ListMarkingResults
   */
  listMarkingResults: {
    methodKind: "unary";
    input: typeof ListMarkingResultsRequestSchema;
    output: typeof ListMarkingResultsResponseSchema;
  },
  /**
   * @generated from rpc admin.v1.MarkService.CreateMarkingResult
   */
  createMarkingResult: {
    methodKind: "unary";
    input: typeof CreateMarkingResultRequestSchema;
    output: typeof CreateMarkingResultResponseSchema;
  },
  /**
   * @generated from rpc admin.v1.MarkService.UpdateMarkingResultVisibilities
   */
  updateMarkingResultVisibilities: {
    methodKind: "unary";
    input: typeof UpdateMarkingResultVisibilitiesRequestSchema;
    output: typeof UpdateMarkingResultVisibilitiesResponseSchema;
  },
  /**
   * @generated from rpc admin.v1.MarkService.UpdateScores
   */
  updateScores: {
    methodKind: "unary";
    input: typeof UpdateScoresRequestSchema;
    output: typeof UpdateScoresResponseSchema;
  },
}>;

