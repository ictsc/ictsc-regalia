// @generated by protoc-gen-es v2.8.0 with parameter "target=js+dts"
// @generated from file admin/v1/problem.proto (package admin.v1, syntax proto3)
/* eslint-disable */

import type { GenEnum, GenFile, GenMessage, GenService } from "@bufbuild/protobuf/codegenv2";
import type { Message } from "@bufbuild/protobuf";

/**
 * Describes the file admin/v1/problem.proto.
 */
export declare const file_admin_v1_problem: GenFile;

/**
 * @generated from message admin.v1.Problem
 */
export declare type Problem = Message<"admin.v1.Problem"> & {
  /**
   * 問題コード
   *
   * @generated from field: string code = 1;
   */
  code: string;

  /**
   * タイトル
   *
   * @generated from field: string title = 2;
   */
  title: string;

  /**
   * 最大得点
   *
   * @generated from field: uint32 max_score = 3;
   */
  maxScore: number;

  /**
   * 問題カテゴリー
   *
   * @generated from field: string category = 4;
   */
  category: string;

  /**
   * @generated from field: admin.v1.RedeployRule redeploy_rule = 5;
   */
  redeployRule?: RedeployRule;

  /**
   * @generated from field: admin.v1.ProblemBody body = 6;
   */
  body?: ProblemBody;
};

/**
 * Describes the message admin.v1.Problem.
 * Use `create(ProblemSchema)` to create a new message.
 */
export declare const ProblemSchema: GenMessage<Problem>;

/**
 * @generated from message admin.v1.RedeployRule
 */
export declare type RedeployRule = Message<"admin.v1.RedeployRule"> & {
  /**
   * @generated from field: admin.v1.RedeployRuleType type = 1;
   */
  type: RedeployRuleType;

  /**
   * 再展開ペナルティの発生する再展開回数の閾値
   *
   * @generated from field: uint32 penalty_threshold = 2;
   */
  penaltyThreshold: number;

  /**
   * 再展開ペナルティの割合
   *
   * @generated from field: uint32 penalty_percentage = 3;
   */
  penaltyPercentage: number;
};

/**
 * Describes the message admin.v1.RedeployRule.
 * Use `create(RedeployRuleSchema)` to create a new message.
 */
export declare const RedeployRuleSchema: GenMessage<RedeployRule>;

/**
 * @generated from message admin.v1.ProblemBody
 */
export declare type ProblemBody = Message<"admin.v1.ProblemBody"> & {
  /**
   * @generated from field: admin.v1.ProblemType type = 1;
   */
  type: ProblemType;

  /**
   * @generated from oneof admin.v1.ProblemBody.body
   */
  body: {
    /**
     * @generated from field: admin.v1.DescriptiveProblem descriptive = 2;
     */
    value: DescriptiveProblem;
    case: "descriptive";
  } | { case: undefined; value?: undefined };
};

/**
 * Describes the message admin.v1.ProblemBody.
 * Use `create(ProblemBodySchema)` to create a new message.
 */
export declare const ProblemBodySchema: GenMessage<ProblemBody>;

/**
 * @generated from message admin.v1.DescriptiveProblem
 */
export declare type DescriptiveProblem = Message<"admin.v1.DescriptiveProblem"> & {
  /**
   * Markdown 形式の問題文
   *
   * @generated from field: string problem_markdown = 3;
   */
  problemMarkdown: string;

  /**
   * Markdown 形式の解説文
   *
   * @generated from field: string explanation_markdown = 4;
   */
  explanationMarkdown: string;
};

/**
 * Describes the message admin.v1.DescriptiveProblem.
 * Use `create(DescriptiveProblemSchema)` to create a new message.
 */
export declare const DescriptiveProblemSchema: GenMessage<DescriptiveProblem>;

/**
 * @generated from message admin.v1.ListProblemsRequest
 */
export declare type ListProblemsRequest = Message<"admin.v1.ListProblemsRequest"> & {
};

/**
 * Describes the message admin.v1.ListProblemsRequest.
 * Use `create(ListProblemsRequestSchema)` to create a new message.
 */
export declare const ListProblemsRequestSchema: GenMessage<ListProblemsRequest>;

/**
 * @generated from message admin.v1.ListProblemsResponse
 */
export declare type ListProblemsResponse = Message<"admin.v1.ListProblemsResponse"> & {
  /**
   * @generated from field: repeated admin.v1.Problem problems = 1;
   */
  problems: Problem[];
};

/**
 * Describes the message admin.v1.ListProblemsResponse.
 * Use `create(ListProblemsResponseSchema)` to create a new message.
 */
export declare const ListProblemsResponseSchema: GenMessage<ListProblemsResponse>;

/**
 * @generated from message admin.v1.GetProblemRequest
 */
export declare type GetProblemRequest = Message<"admin.v1.GetProblemRequest"> & {
  /**
   * @generated from field: string code = 1;
   */
  code: string;
};

/**
 * Describes the message admin.v1.GetProblemRequest.
 * Use `create(GetProblemRequestSchema)` to create a new message.
 */
export declare const GetProblemRequestSchema: GenMessage<GetProblemRequest>;

/**
 * @generated from message admin.v1.GetProblemResponse
 */
export declare type GetProblemResponse = Message<"admin.v1.GetProblemResponse"> & {
  /**
   * @generated from field: admin.v1.Problem problem = 1;
   */
  problem?: Problem;
};

/**
 * Describes the message admin.v1.GetProblemResponse.
 * Use `create(GetProblemResponseSchema)` to create a new message.
 */
export declare const GetProblemResponseSchema: GenMessage<GetProblemResponse>;

/**
 * @generated from message admin.v1.CreateProblemRequest
 */
export declare type CreateProblemRequest = Message<"admin.v1.CreateProblemRequest"> & {
  /**
   * @generated from field: admin.v1.Problem problem = 1;
   */
  problem?: Problem;
};

/**
 * Describes the message admin.v1.CreateProblemRequest.
 * Use `create(CreateProblemRequestSchema)` to create a new message.
 */
export declare const CreateProblemRequestSchema: GenMessage<CreateProblemRequest>;

/**
 * @generated from message admin.v1.CreateProblemResponse
 */
export declare type CreateProblemResponse = Message<"admin.v1.CreateProblemResponse"> & {
  /**
   * @generated from field: admin.v1.Problem problem = 1;
   */
  problem?: Problem;
};

/**
 * Describes the message admin.v1.CreateProblemResponse.
 * Use `create(CreateProblemResponseSchema)` to create a new message.
 */
export declare const CreateProblemResponseSchema: GenMessage<CreateProblemResponse>;

/**
 * @generated from message admin.v1.UpdateProblemRequest
 */
export declare type UpdateProblemRequest = Message<"admin.v1.UpdateProblemRequest"> & {
  /**
   * @generated from field: admin.v1.Problem problem = 1;
   */
  problem?: Problem;
};

/**
 * Describes the message admin.v1.UpdateProblemRequest.
 * Use `create(UpdateProblemRequestSchema)` to create a new message.
 */
export declare const UpdateProblemRequestSchema: GenMessage<UpdateProblemRequest>;

/**
 * @generated from message admin.v1.UpdateProblemResponse
 */
export declare type UpdateProblemResponse = Message<"admin.v1.UpdateProblemResponse"> & {
  /**
   * @generated from field: admin.v1.Problem problem = 1;
   */
  problem?: Problem;
};

/**
 * Describes the message admin.v1.UpdateProblemResponse.
 * Use `create(UpdateProblemResponseSchema)` to create a new message.
 */
export declare const UpdateProblemResponseSchema: GenMessage<UpdateProblemResponse>;

/**
 * @generated from message admin.v1.DeleteProblemRequest
 */
export declare type DeleteProblemRequest = Message<"admin.v1.DeleteProblemRequest"> & {
  /**
   * @generated from field: string code = 1;
   */
  code: string;
};

/**
 * Describes the message admin.v1.DeleteProblemRequest.
 * Use `create(DeleteProblemRequestSchema)` to create a new message.
 */
export declare const DeleteProblemRequestSchema: GenMessage<DeleteProblemRequest>;

/**
 * @generated from message admin.v1.DeleteProblemResponse
 */
export declare type DeleteProblemResponse = Message<"admin.v1.DeleteProblemResponse"> & {
};

/**
 * Describes the message admin.v1.DeleteProblemResponse.
 * Use `create(DeleteProblemResponseSchema)` to create a new message.
 */
export declare const DeleteProblemResponseSchema: GenMessage<DeleteProblemResponse>;

/**
 * @generated from enum admin.v1.RedeployRuleType
 */
export enum RedeployRuleType {
  /**
   * @generated from enum value: REDEPLOY_RULE_TYPE_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * 自動での再展開ができない問題
   *
   * @generated from enum value: REDEPLOY_RULE_TYPE_UNREDEPLOYABLE = 1;
   */
  UNREDEPLOYABLE = 1,

  /**
   * 再展開に最大点数への割合ペナルティがある問題
   *
   * @generated from enum value: REDEPLOY_RULE_TYPE_PERCENTAGE_PENALTY = 2;
   */
  PERCENTAGE_PENALTY = 2,
}

/**
 * Describes the enum admin.v1.RedeployRuleType.
 */
export declare const RedeployRuleTypeSchema: GenEnum<RedeployRuleType>;

/**
 * @generated from enum admin.v1.ProblemType
 */
export enum ProblemType {
  /**
   * @generated from enum value: PROBLEM_TYPE_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * @generated from enum value: PROBLEM_TYPE_DESCRIPTIVE = 1;
   */
  DESCRIPTIVE = 1,
}

/**
 * Describes the enum admin.v1.ProblemType.
 */
export declare const ProblemTypeSchema: GenEnum<ProblemType>;

/**
 * @generated from service admin.v1.ProblemService
 */
export declare const ProblemService: GenService<{
  /**
   * @generated from rpc admin.v1.ProblemService.ListProblems
   */
  listProblems: {
    methodKind: "unary";
    input: typeof ListProblemsRequestSchema;
    output: typeof ListProblemsResponseSchema;
  },
  /**
   * @generated from rpc admin.v1.ProblemService.GetProblem
   */
  getProblem: {
    methodKind: "unary";
    input: typeof GetProblemRequestSchema;
    output: typeof GetProblemResponseSchema;
  },
  /**
   * @generated from rpc admin.v1.ProblemService.CreateProblem
   */
  createProblem: {
    methodKind: "unary";
    input: typeof CreateProblemRequestSchema;
    output: typeof CreateProblemResponseSchema;
  },
  /**
   * @generated from rpc admin.v1.ProblemService.UpdateProblem
   */
  updateProblem: {
    methodKind: "unary";
    input: typeof UpdateProblemRequestSchema;
    output: typeof UpdateProblemResponseSchema;
  },
  /**
   * @generated from rpc admin.v1.ProblemService.DeleteProblem
   */
  deleteProblem: {
    methodKind: "unary";
    input: typeof DeleteProblemRequestSchema;
    output: typeof DeleteProblemResponseSchema;
  },
}>;

