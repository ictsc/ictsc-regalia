// Copyright 2023 Buf Technologies, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// @generated by protoc-gen-es v2.9.0 with parameter "target=js+dts"
// @generated from file buf/validate/validate.proto (package buf.validate, syntax proto3)
/* eslint-disable */

import { enumDesc, extDesc, fileDesc, messageDesc, tsEnum } from "@bufbuild/protobuf/codegenv2";
import { file_buf_validate_expression } from "./expression_pb";
import { file_buf_validate_priv_private } from "./priv/private_pb";
import { file_google_protobuf_descriptor, file_google_protobuf_duration, file_google_protobuf_timestamp } from "@bufbuild/protobuf/wkt";

/**
 * Describes the file buf/validate/validate.proto.
 */
export const file_buf_validate_validate = /*@__PURE__*/
  fileDesc("", [file_buf_validate_expression, file_buf_validate_priv_private, file_google_protobuf_descriptor, file_google_protobuf_duration, file_google_protobuf_timestamp]);

/**
 * Describes the message buf.validate.MessageConstraints.
 * Use `create(MessageConstraintsSchema)` to create a new message.
 */
export const MessageConstraintsSchema = /*@__PURE__*/
  messageDesc(file_buf_validate_validate, 0);

/**
 * Describes the message buf.validate.OneofConstraints.
 * Use `create(OneofConstraintsSchema)` to create a new message.
 */
export const OneofConstraintsSchema = /*@__PURE__*/
  messageDesc(file_buf_validate_validate, 1);

/**
 * Describes the message buf.validate.FieldConstraints.
 * Use `create(FieldConstraintsSchema)` to create a new message.
 */
export const FieldConstraintsSchema = /*@__PURE__*/
  messageDesc(file_buf_validate_validate, 2);

/**
 * Describes the message buf.validate.FloatRules.
 * Use `create(FloatRulesSchema)` to create a new message.
 */
export const FloatRulesSchema = /*@__PURE__*/
  messageDesc(file_buf_validate_validate, 3);

/**
 * Describes the message buf.validate.DoubleRules.
 * Use `create(DoubleRulesSchema)` to create a new message.
 */
export const DoubleRulesSchema = /*@__PURE__*/
  messageDesc(file_buf_validate_validate, 4);

/**
 * Describes the message buf.validate.Int32Rules.
 * Use `create(Int32RulesSchema)` to create a new message.
 */
export const Int32RulesSchema = /*@__PURE__*/
  messageDesc(file_buf_validate_validate, 5);

/**
 * Describes the message buf.validate.Int64Rules.
 * Use `create(Int64RulesSchema)` to create a new message.
 */
export const Int64RulesSchema = /*@__PURE__*/
  messageDesc(file_buf_validate_validate, 6);

/**
 * Describes the message buf.validate.UInt32Rules.
 * Use `create(UInt32RulesSchema)` to create a new message.
 */
export const UInt32RulesSchema = /*@__PURE__*/
  messageDesc(file_buf_validate_validate, 7);

/**
 * Describes the message buf.validate.UInt64Rules.
 * Use `create(UInt64RulesSchema)` to create a new message.
 */
export const UInt64RulesSchema = /*@__PURE__*/
  messageDesc(file_buf_validate_validate, 8);

/**
 * Describes the message buf.validate.SInt32Rules.
 * Use `create(SInt32RulesSchema)` to create a new message.
 */
export const SInt32RulesSchema = /*@__PURE__*/
  messageDesc(file_buf_validate_validate, 9);

/**
 * Describes the message buf.validate.SInt64Rules.
 * Use `create(SInt64RulesSchema)` to create a new message.
 */
export const SInt64RulesSchema = /*@__PURE__*/
  messageDesc(file_buf_validate_validate, 10);

/**
 * Describes the message buf.validate.Fixed32Rules.
 * Use `create(Fixed32RulesSchema)` to create a new message.
 */
export const Fixed32RulesSchema = /*@__PURE__*/
  messageDesc(file_buf_validate_validate, 11);

/**
 * Describes the message buf.validate.Fixed64Rules.
 * Use `create(Fixed64RulesSchema)` to create a new message.
 */
export const Fixed64RulesSchema = /*@__PURE__*/
  messageDesc(file_buf_validate_validate, 12);

/**
 * Describes the message buf.validate.SFixed32Rules.
 * Use `create(SFixed32RulesSchema)` to create a new message.
 */
export const SFixed32RulesSchema = /*@__PURE__*/
  messageDesc(file_buf_validate_validate, 13);

/**
 * Describes the message buf.validate.SFixed64Rules.
 * Use `create(SFixed64RulesSchema)` to create a new message.
 */
export const SFixed64RulesSchema = /*@__PURE__*/
  messageDesc(file_buf_validate_validate, 14);

/**
 * Describes the message buf.validate.BoolRules.
 * Use `create(BoolRulesSchema)` to create a new message.
 */
export const BoolRulesSchema = /*@__PURE__*/
  messageDesc(file_buf_validate_validate, 15);

/**
 * Describes the message buf.validate.StringRules.
 * Use `create(StringRulesSchema)` to create a new message.
 */
export const StringRulesSchema = /*@__PURE__*/
  messageDesc(file_buf_validate_validate, 16);

/**
 * Describes the message buf.validate.BytesRules.
 * Use `create(BytesRulesSchema)` to create a new message.
 */
export const BytesRulesSchema = /*@__PURE__*/
  messageDesc(file_buf_validate_validate, 17);

/**
 * Describes the message buf.validate.EnumRules.
 * Use `create(EnumRulesSchema)` to create a new message.
 */
export const EnumRulesSchema = /*@__PURE__*/
  messageDesc(file_buf_validate_validate, 18);

/**
 * Describes the message buf.validate.RepeatedRules.
 * Use `create(RepeatedRulesSchema)` to create a new message.
 */
export const RepeatedRulesSchema = /*@__PURE__*/
  messageDesc(file_buf_validate_validate, 19);

/**
 * Describes the message buf.validate.MapRules.
 * Use `create(MapRulesSchema)` to create a new message.
 */
export const MapRulesSchema = /*@__PURE__*/
  messageDesc(file_buf_validate_validate, 20);

/**
 * Describes the message buf.validate.AnyRules.
 * Use `create(AnyRulesSchema)` to create a new message.
 */
export const AnyRulesSchema = /*@__PURE__*/
  messageDesc(file_buf_validate_validate, 21);

/**
 * Describes the message buf.validate.DurationRules.
 * Use `create(DurationRulesSchema)` to create a new message.
 */
export const DurationRulesSchema = /*@__PURE__*/
  messageDesc(file_buf_validate_validate, 22);

/**
 * Describes the message buf.validate.TimestampRules.
 * Use `create(TimestampRulesSchema)` to create a new message.
 */
export const TimestampRulesSchema = /*@__PURE__*/
  messageDesc(file_buf_validate_validate, 23);

/**
 * Describes the enum buf.validate.Ignore.
 */
export const IgnoreSchema = /*@__PURE__*/
  enumDesc(file_buf_validate_validate, 0);

/**
 * Specifies how FieldConstraints.ignore behaves. See the documentation for
 * FieldConstraints.required for definitions of "populated" and "nullable".
 *
 * @generated from enum buf.validate.Ignore
 */
export const Ignore = /*@__PURE__*/
  tsEnum(IgnoreSchema);

/**
 * Describes the enum buf.validate.KnownRegex.
 */
export const KnownRegexSchema = /*@__PURE__*/
  enumDesc(file_buf_validate_validate, 1);

/**
 * WellKnownRegex contain some well-known patterns.
 *
 * @generated from enum buf.validate.KnownRegex
 */
export const KnownRegex = /*@__PURE__*/
  tsEnum(KnownRegexSchema);

/**
 * Rules specify the validations to be performed on this message. By default,
 * no validation is performed against a message.
 *
 * @generated from extension: optional buf.validate.MessageConstraints message = 1159;
 */
export const message = /*@__PURE__*/
  extDesc(file_buf_validate_validate, 0);

/**
 * Rules specify the validations to be performed on this oneof. By default,
 * no validation is performed against a oneof.
 *
 * @generated from extension: optional buf.validate.OneofConstraints oneof = 1159;
 */
export const oneof = /*@__PURE__*/
  extDesc(file_buf_validate_validate, 1);

/**
 * Rules specify the validations to be performed on this field. By default,
 * no validation is performed against a field.
 *
 * @generated from extension: optional buf.validate.FieldConstraints field = 1159;
 */
export const field = /*@__PURE__*/
  extDesc(file_buf_validate_validate, 2);

