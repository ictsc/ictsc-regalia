// @generated by protoc-gen-es v2.8.0 with parameter "target=js+dts"
// @generated from file contestant/v1/problem.proto (package contestant.v1, syntax proto3)
/* eslint-disable */

import type { GenEnum, GenFile, GenMessage, GenService } from "@bufbuild/protobuf/codegenv2";
import type { Message } from "@bufbuild/protobuf";
import type { Timestamp } from "@bufbuild/protobuf/wkt";

/**
 * Describes the file contestant/v1/problem.proto.
 */
export declare const file_contestant_v1_problem: GenFile;

/**
 * @generated from message contestant.v1.Problem
 */
export declare type Problem = Message<"contestant.v1.Problem"> & {
  /**
   * 問題コード
   *
   * @generated from field: string code = 1;
   */
  code: string;

  /**
   * タイトル
   *
   * @generated from field: string title = 2;
   */
  title: string;

  /**
   * 最大得点
   *
   * @generated from field: uint32 max_score = 3;
   */
  maxScore: number;

  /**
   * 問題カテゴリー
   *
   * @generated from field: string category = 4;
   */
  category: string;

  /**
   * @generated from field: optional contestant.v1.Score score = 5;
   */
  score?: Score;

  /**
   * @generated from field: contestant.v1.Deployment deployment = 6;
   */
  deployment?: Deployment;

  /**
   * @generated from field: contestant.v1.ProblemBody body = 7;
   */
  body?: ProblemBody;
};

/**
 * Describes the message contestant.v1.Problem.
 * Use `create(ProblemSchema)` to create a new message.
 */
export declare const ProblemSchema: GenMessage<Problem>;

/**
 * @generated from message contestant.v1.Score
 */
export declare type Score = Message<"contestant.v1.Score"> & {
  /**
   * 採点による得点
   *
   * @generated from field: uint32 marked_score = 1;
   */
  markedScore: number;

  /**
   * ペナルティによる減点
   *
   * @generated from field: uint32 penalty = 2;
   */
  penalty: number;

  /**
   * 最終的な得点
   *
   * @generated from field: uint32 score = 3;
   */
  score: number;

  /**
   * 最大得点
   *
   * @generated from field: uint32 max_score = 4;
   */
  maxScore: number;
};

/**
 * Describes the message contestant.v1.Score.
 * Use `create(ScoreSchema)` to create a new message.
 */
export declare const ScoreSchema: GenMessage<Score>;

/**
 * @generated from message contestant.v1.Deployment
 */
export declare type Deployment = Message<"contestant.v1.Deployment"> & {
  /**
   * @generated from field: contestant.v1.DeploymentStatus status = 1;
   */
  status: DeploymentStatus;

  /**
   * @generated from field: bool redeployable = 2;
   */
  redeployable: boolean;

  /**
   * @generated from field: uint32 penalty_threashold = 3;
   */
  penaltyThreashold: number;
};

/**
 * Describes the message contestant.v1.Deployment.
 * Use `create(DeploymentSchema)` to create a new message.
 */
export declare const DeploymentSchema: GenMessage<Deployment>;

/**
 * @generated from message contestant.v1.DeploymentRequest
 */
export declare type DeploymentRequest = Message<"contestant.v1.DeploymentRequest"> & {
  /**
   * @generated from field: uint32 revision = 1;
   */
  revision: number;

  /**
   * @generated from field: contestant.v1.DeploymentStatus status = 2;
   */
  status: DeploymentStatus;

  /**
   * @generated from field: google.protobuf.Timestamp requested_at = 3;
   */
  requestedAt?: Timestamp;

  /**
   * @generated from field: uint32 penalty = 4;
   */
  penalty: number;

  /**
   * 残り許容再展開回数
   *
   * @generated from field: int32 allowed_request_count = 5;
   */
  allowedRequestCount: number;
};

/**
 * Describes the message contestant.v1.DeploymentRequest.
 * Use `create(DeploymentRequestSchema)` to create a new message.
 */
export declare const DeploymentRequestSchema: GenMessage<DeploymentRequest>;

/**
 * @generated from message contestant.v1.ProblemBody
 */
export declare type ProblemBody = Message<"contestant.v1.ProblemBody"> & {
  /**
   * @generated from field: contestant.v1.ProblemType type = 1;
   */
  type: ProblemType;

  /**
   * @generated from oneof contestant.v1.ProblemBody.body
   */
  body: {
    /**
     * @generated from field: contestant.v1.DescriptiveProblem descriptive = 2;
     */
    value: DescriptiveProblem;
    case: "descriptive";
  } | { case: undefined; value?: undefined };
};

/**
 * Describes the message contestant.v1.ProblemBody.
 * Use `create(ProblemBodySchema)` to create a new message.
 */
export declare const ProblemBodySchema: GenMessage<ProblemBody>;

/**
 * @generated from message contestant.v1.DescriptiveProblem
 */
export declare type DescriptiveProblem = Message<"contestant.v1.DescriptiveProblem"> & {
  /**
   * 問題文
   *
   * @generated from field: string body = 1;
   */
  body: string;
};

/**
 * Describes the message contestant.v1.DescriptiveProblem.
 * Use `create(DescriptiveProblemSchema)` to create a new message.
 */
export declare const DescriptiveProblemSchema: GenMessage<DescriptiveProblem>;

/**
 * @generated from message contestant.v1.ListProblemsRequest
 */
export declare type ListProblemsRequest = Message<"contestant.v1.ListProblemsRequest"> & {
};

/**
 * Describes the message contestant.v1.ListProblemsRequest.
 * Use `create(ListProblemsRequestSchema)` to create a new message.
 */
export declare const ListProblemsRequestSchema: GenMessage<ListProblemsRequest>;

/**
 * @generated from message contestant.v1.ListProblemsResponse
 */
export declare type ListProblemsResponse = Message<"contestant.v1.ListProblemsResponse"> & {
  /**
   * @generated from field: repeated contestant.v1.Problem problems = 1;
   */
  problems: Problem[];
};

/**
 * Describes the message contestant.v1.ListProblemsResponse.
 * Use `create(ListProblemsResponseSchema)` to create a new message.
 */
export declare const ListProblemsResponseSchema: GenMessage<ListProblemsResponse>;

/**
 * @generated from message contestant.v1.GetProblemRequest
 */
export declare type GetProblemRequest = Message<"contestant.v1.GetProblemRequest"> & {
  /**
   * @generated from field: string code = 1;
   */
  code: string;
};

/**
 * Describes the message contestant.v1.GetProblemRequest.
 * Use `create(GetProblemRequestSchema)` to create a new message.
 */
export declare const GetProblemRequestSchema: GenMessage<GetProblemRequest>;

/**
 * @generated from message contestant.v1.GetProblemResponse
 */
export declare type GetProblemResponse = Message<"contestant.v1.GetProblemResponse"> & {
  /**
   * @generated from field: contestant.v1.Problem problem = 1;
   */
  problem?: Problem;
};

/**
 * Describes the message contestant.v1.GetProblemResponse.
 * Use `create(GetProblemResponseSchema)` to create a new message.
 */
export declare const GetProblemResponseSchema: GenMessage<GetProblemResponse>;

/**
 * @generated from message contestant.v1.ListDeploymentsRequest
 */
export declare type ListDeploymentsRequest = Message<"contestant.v1.ListDeploymentsRequest"> & {
  /**
   * @generated from field: string code = 1;
   */
  code: string;
};

/**
 * Describes the message contestant.v1.ListDeploymentsRequest.
 * Use `create(ListDeploymentsRequestSchema)` to create a new message.
 */
export declare const ListDeploymentsRequestSchema: GenMessage<ListDeploymentsRequest>;

/**
 * @generated from message contestant.v1.ListDeploymentsResponse
 */
export declare type ListDeploymentsResponse = Message<"contestant.v1.ListDeploymentsResponse"> & {
  /**
   * @generated from field: repeated contestant.v1.DeploymentRequest deployments = 1;
   */
  deployments: DeploymentRequest[];
};

/**
 * Describes the message contestant.v1.ListDeploymentsResponse.
 * Use `create(ListDeploymentsResponseSchema)` to create a new message.
 */
export declare const ListDeploymentsResponseSchema: GenMessage<ListDeploymentsResponse>;

/**
 * @generated from message contestant.v1.DeployRequest
 */
export declare type DeployRequest = Message<"contestant.v1.DeployRequest"> & {
  /**
   * @generated from field: string code = 1;
   */
  code: string;
};

/**
 * Describes the message contestant.v1.DeployRequest.
 * Use `create(DeployRequestSchema)` to create a new message.
 */
export declare const DeployRequestSchema: GenMessage<DeployRequest>;

/**
 * @generated from message contestant.v1.DeployResponse
 */
export declare type DeployResponse = Message<"contestant.v1.DeployResponse"> & {
  /**
   * @generated from field: contestant.v1.DeploymentRequest deployment = 1;
   */
  deployment?: DeploymentRequest;
};

/**
 * Describes the message contestant.v1.DeployResponse.
 * Use `create(DeployResponseSchema)` to create a new message.
 */
export declare const DeployResponseSchema: GenMessage<DeployResponse>;

/**
 * @generated from enum contestant.v1.DeploymentStatus
 */
export enum DeploymentStatus {
  /**
   * @generated from enum value: DEPLOYMENT_STATUS_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * 展開済み
   *
   * @generated from enum value: DEPLOYMENT_STATUS_DEPLOYED = 1;
   */
  DEPLOYED = 1,

  /**
   * 展開中
   *
   * @generated from enum value: DEPLOYMENT_STATUS_DEPLOYING = 2;
   */
  DEPLOYING = 2,

  /**
   * 展開失敗
   *
   * @generated from enum value: DEPLOYMENT_STATUS_FAILED = 3;
   */
  FAILED = 3,
}

/**
 * Describes the enum contestant.v1.DeploymentStatus.
 */
export declare const DeploymentStatusSchema: GenEnum<DeploymentStatus>;

/**
 * @generated from enum contestant.v1.ProblemType
 */
export enum ProblemType {
  /**
   * @generated from enum value: PROBLEM_TYPE_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * @generated from enum value: PROBLEM_TYPE_DESCRIPTIVE = 1;
   */
  DESCRIPTIVE = 1,
}

/**
 * Describes the enum contestant.v1.ProblemType.
 */
export declare const ProblemTypeSchema: GenEnum<ProblemType>;

/**
 * @generated from service contestant.v1.ProblemService
 */
export declare const ProblemService: GenService<{
  /**
   * @generated from rpc contestant.v1.ProblemService.ListProblems
   */
  listProblems: {
    methodKind: "unary";
    input: typeof ListProblemsRequestSchema;
    output: typeof ListProblemsResponseSchema;
  },
  /**
   * @generated from rpc contestant.v1.ProblemService.GetProblem
   */
  getProblem: {
    methodKind: "unary";
    input: typeof GetProblemRequestSchema;
    output: typeof GetProblemResponseSchema;
  },
  /**
   * @generated from rpc contestant.v1.ProblemService.ListDeployments
   */
  listDeployments: {
    methodKind: "unary";
    input: typeof ListDeploymentsRequestSchema;
    output: typeof ListDeploymentsResponseSchema;
  },
  /**
   * @generated from rpc contestant.v1.ProblemService.Deploy
   */
  deploy: {
    methodKind: "unary";
    input: typeof DeployRequestSchema;
    output: typeof DeployResponseSchema;
  },
}>;

