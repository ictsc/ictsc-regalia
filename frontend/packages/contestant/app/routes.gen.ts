/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from "./routes/~__root";
import { Route as SignupRouteImport } from "./routes/~signup/~route";
import { Route as SigninRouteImport } from "./routes/~signin/~route";
import { Route as IndexRouteImport } from "./routes/~index/~route";
import { Route as ProblemsCodeRouteImport } from "./routes/~problems.$code/~route";
import { Route as ProblemsIndexRouteImport } from "./routes/~problems.index/~route";

// Create/Update Routes

const SignupRouteRoute = SignupRouteImport.update({
  id: "/signup",
  path: "/signup",
  getParentRoute: () => rootRoute,
} as any);

const SigninRouteRoute = SigninRouteImport.update({
  id: "/signin",
  path: "/signin",
  getParentRoute: () => rootRoute,
} as any);

const IndexRouteRoute = IndexRouteImport.update({
  id: "/",
  path: "/",
  getParentRoute: () => rootRoute,
} as any);

const ProblemsCodeRouteRoute = ProblemsCodeRouteImport.update({
  id: "/problems/$code",
  path: "/problems/$code",
  getParentRoute: () => rootRoute,
} as any).lazy(() =>
  import("./routes/~problems.$code/~route.lazy").then((d) => d.Route),
);

const ProblemsIndexRouteRoute = ProblemsIndexRouteImport.update({
  id: "/problems/",
  path: "/problems/",
  getParentRoute: () => rootRoute,
} as any);

// Populate the FileRoutesByPath interface

declare module "@tanstack/react-router" {
  interface FileRoutesByPath {
    "/": {
      id: "/";
      path: "/";
      fullPath: "/";
      preLoaderRoute: typeof IndexRouteImport;
      parentRoute: typeof rootRoute;
    };
    "/signin": {
      id: "/signin";
      path: "/signin";
      fullPath: "/signin";
      preLoaderRoute: typeof SigninRouteImport;
      parentRoute: typeof rootRoute;
    };
    "/signup": {
      id: "/signup";
      path: "/signup";
      fullPath: "/signup";
      preLoaderRoute: typeof SignupRouteImport;
      parentRoute: typeof rootRoute;
    };
    "/problems/": {
      id: "/problems/";
      path: "/problems";
      fullPath: "/problems";
      preLoaderRoute: typeof ProblemsIndexRouteImport;
      parentRoute: typeof rootRoute;
    };
    "/problems/$code": {
      id: "/problems/$code";
      path: "/problems/$code";
      fullPath: "/problems/$code";
      preLoaderRoute: typeof ProblemsCodeRouteImport;
      parentRoute: typeof rootRoute;
    };
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  "/": typeof IndexRouteRoute;
  "/signin": typeof SigninRouteRoute;
  "/signup": typeof SignupRouteRoute;
  "/problems": typeof ProblemsIndexRouteRoute;
  "/problems/$code": typeof ProblemsCodeRouteRoute;
}

export interface FileRoutesByTo {
  "/": typeof IndexRouteRoute;
  "/signin": typeof SigninRouteRoute;
  "/signup": typeof SignupRouteRoute;
  "/problems": typeof ProblemsIndexRouteRoute;
  "/problems/$code": typeof ProblemsCodeRouteRoute;
}

export interface FileRoutesById {
  __root__: typeof rootRoute;
  "/": typeof IndexRouteRoute;
  "/signin": typeof SigninRouteRoute;
  "/signup": typeof SignupRouteRoute;
  "/problems/": typeof ProblemsIndexRouteRoute;
  "/problems/$code": typeof ProblemsCodeRouteRoute;
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath;
  fullPaths: "/" | "/signin" | "/signup" | "/problems" | "/problems/$code";
  fileRoutesByTo: FileRoutesByTo;
  to: "/" | "/signin" | "/signup" | "/problems" | "/problems/$code";
  id:
    | "__root__"
    | "/"
    | "/signin"
    | "/signup"
    | "/problems/"
    | "/problems/$code";
  fileRoutesById: FileRoutesById;
}

export interface RootRouteChildren {
  IndexRouteRoute: typeof IndexRouteRoute;
  SigninRouteRoute: typeof SigninRouteRoute;
  SignupRouteRoute: typeof SignupRouteRoute;
  ProblemsIndexRouteRoute: typeof ProblemsIndexRouteRoute;
  ProblemsCodeRouteRoute: typeof ProblemsCodeRouteRoute;
}

const rootRouteChildren: RootRouteChildren = {
  IndexRouteRoute: IndexRouteRoute,
  SigninRouteRoute: SigninRouteRoute,
  SignupRouteRoute: SignupRouteRoute,
  ProblemsIndexRouteRoute: ProblemsIndexRouteRoute,
  ProblemsCodeRouteRoute: ProblemsCodeRouteRoute,
};

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>();

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "~__root.tsx",
      "children": [
        "/",
        "/signin",
        "/signup",
        "/problems/",
        "/problems/$code"
      ]
    },
    "/": {
      "filePath": "~index/~route.tsx"
    },
    "/signin": {
      "filePath": "~signin/~route.tsx"
    },
    "/signup": {
      "filePath": "~signup/~route.tsx"
    },
    "/problems/": {
      "filePath": "~problems.index/~route.tsx"
    },
    "/problems/$code": {
      "filePath": "~problems.$code/~route.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
