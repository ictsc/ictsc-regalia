/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from "./routes/~__root";
import { Route as TeamsRouteRouteImport } from "./routes/~teams/~route";
import { Route as SignupRouteRouteImport } from "./routes/~signup/~route";
import { Route as SigninRouteRouteImport } from "./routes/~signin/~route";
import { Route as RuleRouteRouteImport } from "./routes/~rule/~route";
import { Route as RankingRouteRouteImport } from "./routes/~ranking/~route";
import { Route as ProblemsRouteImport } from "./routes/~problems";
import { Route as AnnouncesRouteImport } from "./routes/~announces";
import { Route as IndexRouteRouteImport } from "./routes/~index/~route";
import { Route as ProblemsCodeRouteRouteImport } from "./routes/~problems.$code/~route";
import { Route as AnnouncesSlugRouteRouteImport } from "./routes/~announces.$slug/~route";
import { Route as ProblemsIndexRouteRouteImport } from "./routes/~problems.index/~route";
import { Route as AnnouncesIndexRouteRouteImport } from "./routes/~announces.index/~route";

const TeamsRouteRoute = TeamsRouteRouteImport.update({
  id: "/teams",
  path: "/teams",
  getParentRoute: () => rootRouteImport,
} as any);
const SignupRouteRoute = SignupRouteRouteImport.update({
  id: "/signup",
  path: "/signup",
  getParentRoute: () => rootRouteImport,
} as any);
const SigninRouteRoute = SigninRouteRouteImport.update({
  id: "/signin",
  path: "/signin",
  getParentRoute: () => rootRouteImport,
} as any);
const RuleRouteRoute = RuleRouteRouteImport.update({
  id: "/rule",
  path: "/rule",
  getParentRoute: () => rootRouteImport,
} as any).lazy(() => import("./routes/~rule/~route.lazy").then((d) => d.Route));
const RankingRouteRoute = RankingRouteRouteImport.update({
  id: "/ranking",
  path: "/ranking",
  getParentRoute: () => rootRouteImport,
} as any);
const ProblemsRoute = ProblemsRouteImport.update({
  id: "/problems",
  path: "/problems",
  getParentRoute: () => rootRouteImport,
} as any);
const AnnouncesRoute = AnnouncesRouteImport.update({
  id: "/announces",
  path: "/announces",
  getParentRoute: () => rootRouteImport,
} as any);
const IndexRouteRoute = IndexRouteRouteImport.update({
  id: "/",
  path: "/",
  getParentRoute: () => rootRouteImport,
} as any);
const ProblemsCodeRouteRoute = ProblemsCodeRouteRouteImport.update({
  id: "/$code",
  path: "/$code",
  getParentRoute: () => ProblemsRoute,
} as any).lazy(() =>
  import("./routes/~problems.$code/~route.lazy").then((d) => d.Route),
);
const AnnouncesSlugRouteRoute = AnnouncesSlugRouteRouteImport.update({
  id: "/$slug",
  path: "/$slug",
  getParentRoute: () => AnnouncesRoute,
} as any).lazy(() =>
  import("./routes/~announces.$slug/~route.lazy").then((d) => d.Route),
);
const ProblemsIndexRouteRoute = ProblemsIndexRouteRouteImport.update({
  id: "/",
  path: "/",
  getParentRoute: () => ProblemsRoute,
} as any);
const AnnouncesIndexRouteRoute = AnnouncesIndexRouteRouteImport.update({
  id: "/",
  path: "/",
  getParentRoute: () => AnnouncesRoute,
} as any);

export interface FileRoutesByFullPath {
  "/": typeof IndexRouteRoute;
  "/announces": typeof AnnouncesRouteWithChildren;
  "/problems": typeof ProblemsRouteWithChildren;
  "/ranking": typeof RankingRouteRoute;
  "/rule": typeof RuleRouteRoute;
  "/signin": typeof SigninRouteRoute;
  "/signup": typeof SignupRouteRoute;
  "/teams": typeof TeamsRouteRoute;
  "/announces/": typeof AnnouncesIndexRouteRoute;
  "/problems/": typeof ProblemsIndexRouteRoute;
  "/announces/$slug": typeof AnnouncesSlugRouteRoute;
  "/problems/$code": typeof ProblemsCodeRouteRoute;
}
export interface FileRoutesByTo {
  "/": typeof IndexRouteRoute;
  "/ranking": typeof RankingRouteRoute;
  "/rule": typeof RuleRouteRoute;
  "/signin": typeof SigninRouteRoute;
  "/signup": typeof SignupRouteRoute;
  "/teams": typeof TeamsRouteRoute;
  "/announces": typeof AnnouncesIndexRouteRoute;
  "/problems": typeof ProblemsIndexRouteRoute;
  "/announces/$slug": typeof AnnouncesSlugRouteRoute;
  "/problems/$code": typeof ProblemsCodeRouteRoute;
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport;
  "/": typeof IndexRouteRoute;
  "/announces": typeof AnnouncesRouteWithChildren;
  "/problems": typeof ProblemsRouteWithChildren;
  "/ranking": typeof RankingRouteRoute;
  "/rule": typeof RuleRouteRoute;
  "/signin": typeof SigninRouteRoute;
  "/signup": typeof SignupRouteRoute;
  "/teams": typeof TeamsRouteRoute;
  "/announces/": typeof AnnouncesIndexRouteRoute;
  "/problems/": typeof ProblemsIndexRouteRoute;
  "/announces/$slug": typeof AnnouncesSlugRouteRoute;
  "/problems/$code": typeof ProblemsCodeRouteRoute;
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath;
  fullPaths:
    | "/"
    | "/announces"
    | "/problems"
    | "/ranking"
    | "/rule"
    | "/signin"
    | "/signup"
    | "/teams"
    | "/announces/"
    | "/problems/"
    | "/announces/$slug"
    | "/problems/$code";
  fileRoutesByTo: FileRoutesByTo;
  to:
    | "/"
    | "/ranking"
    | "/rule"
    | "/signin"
    | "/signup"
    | "/teams"
    | "/announces"
    | "/problems"
    | "/announces/$slug"
    | "/problems/$code";
  id:
    | "__root__"
    | "/"
    | "/announces"
    | "/problems"
    | "/ranking"
    | "/rule"
    | "/signin"
    | "/signup"
    | "/teams"
    | "/announces/"
    | "/problems/"
    | "/announces/$slug"
    | "/problems/$code";
  fileRoutesById: FileRoutesById;
}
export interface RootRouteChildren {
  IndexRouteRoute: typeof IndexRouteRoute;
  AnnouncesRoute: typeof AnnouncesRouteWithChildren;
  ProblemsRoute: typeof ProblemsRouteWithChildren;
  RankingRouteRoute: typeof RankingRouteRoute;
  RuleRouteRoute: typeof RuleRouteRoute;
  SigninRouteRoute: typeof SigninRouteRoute;
  SignupRouteRoute: typeof SignupRouteRoute;
  TeamsRouteRoute: typeof TeamsRouteRoute;
}

declare module "@tanstack/react-router" {
  interface FileRoutesByPath {
    "/teams": {
      id: "/teams";
      path: "/teams";
      fullPath: "/teams";
      preLoaderRoute: typeof TeamsRouteRouteImport;
      parentRoute: typeof rootRouteImport;
    };
    "/signup": {
      id: "/signup";
      path: "/signup";
      fullPath: "/signup";
      preLoaderRoute: typeof SignupRouteRouteImport;
      parentRoute: typeof rootRouteImport;
    };
    "/signin": {
      id: "/signin";
      path: "/signin";
      fullPath: "/signin";
      preLoaderRoute: typeof SigninRouteRouteImport;
      parentRoute: typeof rootRouteImport;
    };
    "/rule": {
      id: "/rule";
      path: "/rule";
      fullPath: "/rule";
      preLoaderRoute: typeof RuleRouteRouteImport;
      parentRoute: typeof rootRouteImport;
    };
    "/ranking": {
      id: "/ranking";
      path: "/ranking";
      fullPath: "/ranking";
      preLoaderRoute: typeof RankingRouteRouteImport;
      parentRoute: typeof rootRouteImport;
    };
    "/problems": {
      id: "/problems";
      path: "/problems";
      fullPath: "/problems";
      preLoaderRoute: typeof ProblemsRouteImport;
      parentRoute: typeof rootRouteImport;
    };
    "/announces": {
      id: "/announces";
      path: "/announces";
      fullPath: "/announces";
      preLoaderRoute: typeof AnnouncesRouteImport;
      parentRoute: typeof rootRouteImport;
    };
    "/": {
      id: "/";
      path: "/";
      fullPath: "/";
      preLoaderRoute: typeof IndexRouteRouteImport;
      parentRoute: typeof rootRouteImport;
    };
    "/problems/$code": {
      id: "/problems/$code";
      path: "/$code";
      fullPath: "/problems/$code";
      preLoaderRoute: typeof ProblemsCodeRouteRouteImport;
      parentRoute: typeof ProblemsRoute;
    };
    "/announces/$slug": {
      id: "/announces/$slug";
      path: "/$slug";
      fullPath: "/announces/$slug";
      preLoaderRoute: typeof AnnouncesSlugRouteRouteImport;
      parentRoute: typeof AnnouncesRoute;
    };
    "/problems/": {
      id: "/problems/";
      path: "/";
      fullPath: "/problems/";
      preLoaderRoute: typeof ProblemsIndexRouteRouteImport;
      parentRoute: typeof ProblemsRoute;
    };
    "/announces/": {
      id: "/announces/";
      path: "/";
      fullPath: "/announces/";
      preLoaderRoute: typeof AnnouncesIndexRouteRouteImport;
      parentRoute: typeof AnnouncesRoute;
    };
  }
}

interface AnnouncesRouteChildren {
  AnnouncesIndexRouteRoute: typeof AnnouncesIndexRouteRoute;
  AnnouncesSlugRouteRoute: typeof AnnouncesSlugRouteRoute;
}

const AnnouncesRouteChildren: AnnouncesRouteChildren = {
  AnnouncesIndexRouteRoute: AnnouncesIndexRouteRoute,
  AnnouncesSlugRouteRoute: AnnouncesSlugRouteRoute,
};

const AnnouncesRouteWithChildren = AnnouncesRoute._addFileChildren(
  AnnouncesRouteChildren,
);

interface ProblemsRouteChildren {
  ProblemsIndexRouteRoute: typeof ProblemsIndexRouteRoute;
  ProblemsCodeRouteRoute: typeof ProblemsCodeRouteRoute;
}

const ProblemsRouteChildren: ProblemsRouteChildren = {
  ProblemsIndexRouteRoute: ProblemsIndexRouteRoute,
  ProblemsCodeRouteRoute: ProblemsCodeRouteRoute,
};

const ProblemsRouteWithChildren = ProblemsRoute._addFileChildren(
  ProblemsRouteChildren,
);

const rootRouteChildren: RootRouteChildren = {
  IndexRouteRoute: IndexRouteRoute,
  AnnouncesRoute: AnnouncesRouteWithChildren,
  ProblemsRoute: ProblemsRouteWithChildren,
  RankingRouteRoute: RankingRouteRoute,
  RuleRouteRoute: RuleRouteRoute,
  SigninRouteRoute: SigninRouteRoute,
  SignupRouteRoute: SignupRouteRoute,
  TeamsRouteRoute: TeamsRouteRoute,
};
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>();
